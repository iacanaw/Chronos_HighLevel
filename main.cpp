#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <bits/stdc++.h>
#include "reliability.h"

#define DIM_X 20
#define DIM_Y 20
#define N_STATES 35*35
#define N_TASKTYPE  3
#define SYSTEM_SIZE (DIM_X*DIM_Y)  
#define THERMAL_NODES (SYSTEM_SIZE*4)+12  // 4 thermal nodes for each PE plus 12 from the environment
#define TARGET_OCCUPATION 50
#define NUM_TASKS 38
#define LOG 0

long tableUpdates = 0;

// pointer to read the tasks
FILE *ftasks = NULL;
FILE *powerlog = NULL;
FILE *fitlog = NULL;
FILE *fp = NULL;

struct Tasks{
    int id,type;
    float power;
    int totalTime, taskSlot, fit,temp, current_time;
};

Tasks many_core [DIM_Y][DIM_X];

// Tasks tasks [NUM_TASKS] =  {{0,2,0.350,1467,0},{1,1,0.242,1228,0},{2,0,0.190,607,0},{3,0,0.172,1999,0},
//                             {4,0,0.167,1223,0},{5,0,0.162,1399,0},{6,0,0.154,1409,0},{7,2,0.359,1138,0},
//                             {8,2,0.350,1603,0},{9,1,0.242,1835,0},{10,0,0.190,1243,0},{11,0,0.172,1756,0},
//                             {12,0,0.167,639,0},{13,0,0.162,547,0},{14,0,0.154,1073,0},{15,2,0.359,819,0}};

Tasks tasks [NUM_TASKS] =  {{0,2,0.350,467}, {1,1,0.242,228}, {2,0,0.190,607},  {3,0,0.172,999},
                            {4,0,0.167,223}, {5,0,0.162,399}, {6,0,0.154,409}, {7,2,0.359,138},
                            {8,2,0.472,603}, {9,0,0.135,835}, {10,0,0.151,243},{11,0,0.141,756},
                            {12,2,0.469,639}, {13,2,0.474,547}, {14,2,0.477,073},{15,2,0.459,819},
                            {16,1,0.271,479},{17,1,0.282,980},
                            {18,2,0.343,925},{19,2,0.362,669},{20,2,0.360,819}, {21,2,0.347,606},{22,2,0.364,930},{23,1,0.251,633},
                            {24,0,0.187,934}, {25,0,0.188,644}, {26,0,0.188,648}, {27,0,0.196,630}, {28,0,0.206,484},{29,0,0.116,610},{30,2,0.353,422},
                            {31,2,0.485,353},{32,2,0.382,776},{33,1,0.256,683},{34,1,0.326,371},{35,2,0.428,632},{36,1,0.263,910},{37,2,0.341,458}};


// Score table populated with high values!

float scoreTable[N_TASKTYPE][N_STATES] = {  {356555.0, 308868.0, 313084.0, 270718.0, 210266.0, 322877.0, 316322.0, 279700.0, 210311.0, 325335.0, 311231.0, 133918.0, 276548.0, 32482.0, 1000.0, 326235.0, 318262.0, 302274.0, 272283.0, 321267.0, 310567.0, 282382.0, 322003.0, 216900.0, 62101.0, 325928.0, 319021.0, 297722.0, 321332.0, 302421.0, 140646.0, 324885.0, 302606.0, 190147.0, 210614.0, 310994.0, 311172.0, 301069.0, 279693.0, 65922.0, 316591.0, 315451.0, 281277.0, 116924.0, 321572.0, 305316.0, 107995.0, 201788.0, 28177.0, 1000.0, 323655.0, 321523.0, 280338.0, 221361.0, 324580.0, 304348.0, 246530.0, 320485.0, 202550.0, 36440.0, 324752.0, 308300.0, 270109.0, 317177.0, 271798.0, 100189.0, 320804.0, 263468.0, 171268.0, 116373.0, 311228.0, 310249.0, 286220.0, 229266.0, 10965.0, 321747.0, 288734.0, 272483.0, 59968.0, 310036.0, 275737.0, 43295.0, 132279.0, 26661.0, 4538.0, 323679.0, 303117.0, 276043.0, 100163.0, 315130.0, 287456.0, 170763.0, 305742.0, 119503.0, 24324.0, 313627.0, 298575.0, 181308.0, 302454.0, 209905.0, 80729.0, 309084.0, 164827.0, 87980.0, 63465.0, 309638.0, 290558.0, 243258.0, 54693.0, 3645.0, 319170.0, 289497.0, 141845.0, 28808.0, 281546.0, 143448.0, 41533.0, 58911.0, 25905.0, 4057.0, 316776.0, 287007.0, 226470.0, 45262.0, 301773.0, 271239.0, 162376.0, 218095.0, 122273.0, 26121.0, 313718.0, 271980.0, 82057.0, 271306.0, 182814.0, 38274.0, 195036.0, 49465.0, 50506.0, 9351.0, 311508.0, 178974.0, 75450.0, 17695.0, 3081.0, 252971.0, 173560.0, 31699.0, 18140.0, 147812.0, 66615.0, 19792.0, 11695.0, 12191.0, 1000.0, 289730.0, 208701.0, 48905.0, 15089.0, 263492.0, 150231.0, 138054.0, 130714.0, 146479.0, 12642.0, 251232.0, 118438.0, 85282.0, 155232.0, 189840.0, 49022.0, 52468.0, 39864.0, 43119.0, 3485.0, 337723.0, 304557.0, 308694.0, 271905.0, 54517.0, 322710.0, 310888.0, 292360.0, 55212.0, 310050.0, 230506.0, 21456.0, 36329.0, 9783.0, 1000.0, 323340.0, 321786.0, 300618.0, 213445.0, 322142.0, 306152.0, 148696.0, 216969.0, 66699.0, 4030.0, 326372.0, 311057.0, 258546.0, 306282.0, 169862.0, 17601.0, 318863.0, 212524.0, 23315.0, 64488.0, 308597.0, 303895.0, 291441.0, 269070.0, 13272.0, 309350.0, 286925.0, 278960.0, 45205.0, 280748.0, 187464.0, 23747.0, 49609.0, 1000.0, 1000.0, 325191.0, 312002.0, 275099.0, 150144.0, 318522.0, 290417.0, 168558.0, 197264.0, 49712.0, 4059.0, 317148.0, 294003.0, 198943.0, 303308.0, 139030.0, 19134.0, 301148.0, 159234.0, 30411.0, 20033.0, 301000.0, 293443.0, 279786.0, 105271.0, 9639.0, 284426.0, 292535.0, 181361.0, 48361.0, 204670.0, 119074.0, 10899.0, 24824.0, 1000.0, 1000.0, 310928.0, 302988.0, 272076.0, 150805.0, 308151.0, 282660.0, 161660.0, 138913.0, 50520.0, 3599.0, 314056.0, 285081.0, 194252.0, 238561.0, 124631.0, 16393.0, 209322.0, 79804.0, 29197.0, 6469.0, 289888.0, 215938.0, 165768.0, 52214.0, 6887.0, 248437.0, 224032.0, 88234.0, 27907.0, 133932.0, 44871.0, 6781.0, 8905.0, 7803.0, 1000.0, 292421.0, 276767.0, 153104.0, 86081.0, 266630.0, 213403.0, 217783.0, 56578.0, 51106.0, 1000.0, 271227.0, 192465.0, 237264.0, 136117.0, 225491.0, 27561.0, 97398.0, 93963.0, 20089.0, 8147.0, 227292.0, 205805.0, 303154.0, 207370.0, 3518.0, 148161.0, 258134.0, 155758.0, 19923.0, 91486.0, 9210.0, 6621.0, 2272.0, 1000.0, 1000.0, 229926.0, 315804.0, 286640.0, 90065.0, 248610.0, 194743.0, 46393.0, 21846.0, 8050.0, 1000.0, 287569.0, 299826.0, 107563.0, 86613.0, 33003.0, 1000.0, 131274.0, 44069.0, 1000.0, 4249.0, 199947.0, 197316.0, 262055.0, 116624.0, 11037.0, 106408.0, 239922.0, 112687.0, 17123.0, 53232.0, 27627.0, 5873.0, 7146.0, 6251.0, 1000.0, 244682.0, 296908.0, 247173.0, 74050.0, 221467.0, 191923.0, 62744.0, 30503.0, 7859.0, 1000.0, 255734.0, 249382.0, 115118.0, 102423.0, 39341.0, 3652.0, 106410.0, 31341.0, 1000.0, 4010.0, 183342.0, 176191.0, 169696.0, 29635.0, 2704.0, 106003.0, 185855.0, 52524.0, 25251.0, 49133.0, 23893.0, 1510.0, 3443.0, 1000.0, 1000.0, 239896.0, 258623.0, 167254.0, 178891.0, 196341.0, 141657.0, 73325.0, 10233.0, 7832.0, 1000.0, 208510.0, 167855.0, 231912.0, 54692.0, 29269.0, 1000.0, 43065.0, 52012.0, 1000.0, 1000.0, 25500.0, 35501.0, 113792.0, 33373.0, 7274.0, 7030.0, 39157.0, 11829.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 38538.0, 139267.0, 131164.0, 22948.0, 38772.0, 11927.0, 7847.0, 3264.0, 1000.0, 1000.0, 76890.0, 78445.0, 17179.0, 4770.0, 1000.0, 1000.0, 24384.0, 9282.0, 4063.0, 1000.0, 37376.0, 45984.0, 97205.0, 27495.0, 4262.0, 17720.0, 75586.0, 9409.0, 5351.0, 1000.0, 3552.0, 1000.0, 1000.0, 1000.0, 1000.0, 88244.0, 158825.0, 104595.0, 51577.0, 44525.0, 28829.0, 9766.0, 5823.0, 1000.0, 1000.0, 95959.0, 69104.0, 92332.0, 10688.0, 3149.0, 1000.0, 21318.0, 16713.0, 1000.0, 1000.0, 4206.0, 8099.0, 29974.0, 6215.0, 1000.0, 1000.0, 6199.0, 4684.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 11518.0, 33539.0, 14192.0, 3405.0, 1000.0, 7310.0, 1000.0, 1000.0, 1000.0, 1000.0, 17244.0, 6726.0, 4270.0, 1000.0, 1000.0, 1000.0, 4451.0, 1000.0, 1000.0, 1000.0, 345299.0, 314077.0, 311625.0, 274836.0, 88272.0, 322807.0, 318532.0, 284326.0, 90288.0, 324564.0, 285451.0, 52185.0, 156691.0, 8691.0, 3989.0, 325666.0, 315171.0, 305866.0, 251480.0, 323725.0, 314029.0, 249584.0, 315866.0, 132708.0, 9307.0, 323762.0, 312581.0, 292067.0, 320459.0, 284634.0, 83629.0, 323415.0, 295864.0, 135208.0, 162287.0, 334844.0, 314702.0, 306780.0, 263351.0, 20180.0, 321940.0, 304736.0, 284749.0, 63460.0, 315985.0, 271763.0, 34702.0, 114277.0, 4085.0, 6540.0, 324042.0, 320199.0, 287981.0, 171725.0, 320027.0, 290524.0, 213346.0, 320444.0, 128699.0, 20287.0, 326450.0, 307130.0, 251926.0, 320318.0, 242119.0, 82115.0, 315573.0, 232303.0, 130830.0, 102254.0, 324694.0, 319718.0, 291188.0, 134959.0, 9315.0, 323136.0, 288904.0, 231544.0, 34130.0, 289996.0, 173190.0, 39083.0, 63324.0, 23969.0, 1000.0, 323023.0, 308226.0, 269280.0, 63938.0, 318212.0, 280127.0, 253804.0, 257208.0, 102303.0, 23110.0, 320868.0, 289639.0, 149891.0, 292912.0, 213938.0, 78054.0, 290051.0, 98779.0, 59546.0, 26350.0, 323293.0, 285590.0, 192760.0, 20875.0, 4584.0, 293145.0, 262350.0, 65216.0, 13386.0, 240607.0, 95426.0, 43453.0, 23622.0, 7505.0, 4592.0, 322300.0, 278237.0, 160826.0, 47925.0, 290342.0, 243655.0, 231467.0, 178241.0, 206875.0, 25450.0, 309461.0, 235712.0, 202189.0, 237643.0, 250724.0, 56031.0, 154302.0, 94756.0, 30650.0, 9141.0, 320469.0, 308198.0, 293846.0, 261795.0, 38848.0, 299639.0, 308287.0, 265079.0, 24976.0, 260739.0, 135733.0, 25640.0, 7313.0, 3653.0, 1000.0, 319546.0, 317642.0, 284078.0, 153943.0, 315296.0, 303172.0, 99099.0, 132067.0, 25686.0, 1000.0, 318539.0, 305928.0, 220908.0, 280335.0, 129360.0, 9603.0, 298990.0, 168199.0, 26984.0, 38133.0, 299613.0, 297737.0, 292740.0, 175935.0, 6005.0, 292752.0, 307251.0, 208290.0, 45171.0, 220198.0, 113177.0, 13642.0, 21582.0, 1000.0, 1000.0, 318812.0, 316485.0, 289077.0, 121835.0, 313138.0, 286223.0, 149914.0, 135647.0, 26741.0, 4332.0, 317579.0, 296921.0, 185323.0, 277675.0, 127466.0, 11609.0, 276140.0, 83547.0, 22048.0, 12956.0, 292346.0, 286467.0, 250375.0, 58196.0, 3126.0, 289645.0, 267445.0, 141752.0, 29028.0, 181345.0, 70131.0, 21863.0, 4696.0, 2999.0, 1000.0, 332072.0, 288597.0, 254876.0, 165806.0, 295598.0, 254764.0, 243669.0, 71734.0, 64357.0, 3694.0, 310674.0, 277533.0, 264587.0, 196428.0, 215139.0, 16838.0, 157339.0, 132351.0, 25848.0, 3920.0, 87128.0, 111053.0, 246602.0, 75784.0, 8598.0, 77610.0, 199873.0, 61566.0, 5513.0, 35567.0, 20055.0, 1000.0, 1000.0, 1000.0, 1000.0, 162144.0, 297241.0, 250391.0, 71564.0, 203147.0, 141567.0, 27225.0, 12064.0, 3064.0, 1000.0, 231465.0, 252997.0, 58333.0, 64765.0, 23765.0, 1000.0, 106533.0, 39969.0, 1000.0, 6996.0, 86831.0, 158402.0, 227806.0, 60271.0, 13894.0, 143732.0, 219328.0, 79017.0, 9945.0, 67539.0, 21059.0, 248.0, 1000.0, 1000.0, 1000.0, 235605.0, 297125.0, 212592.0, 183782.0, 235883.0, 132965.0, 77514.0, 21583.0, 1000.0, 1000.0, 284142.0, 238843.0, 216896.0, 61670.0, 29002.0, 1000.0, 75012.0, 43268.0, 16174.0, 6284.0, 10020.0, 16023.0, 70450.0, 14685.0, 2299.0, 14659.0, 20974.0, 15980.0, 3611.0, 1000.0, 1000.0, 3779.0, 1000.0, 1000.0, 1000.0, 49840.0, 149573.0, 107580.0, 31758.0, 38535.0, 23708.0, 1000.0, 3841.0, 1000.0, 1000.0, 81278.0, 78902.0, 19579.0, 7437.0, 4416.0, 1000.0, 23784.0, 16361.0, 1000.0, 1000.0, 323005.0, 310451.0, 303005.0, 217937.0, 15073.0, 314170.0, 315490.0, 256195.0, 30086.0, 304235.0, 176108.0, 18357.0, 36778.0, 4363.0, 1000.0, 327496.0, 314046.0, 296311.0, 134793.0, 320715.0, 298819.0, 124487.0, 229276.0, 25006.0, 4377.0, 322167.0, 310325.0, 196942.0, 303073.0, 167638.0, 21397.0, 304789.0, 184142.0, 82371.0, 61055.0, 308807.0, 304184.0, 290197.0, 142334.0, 7398.0, 315673.0, 309926.0, 199233.0, 5945.0, 279423.0, 122232.0, 14305.0, 30605.0, 1000.0, 1000.0, 319890.0, 319256.0, 273462.0, 59074.0, 320776.0, 289398.0, 107321.0, 199815.0, 29985.0, 9977.0, 319871.0, 301076.0, 124965.0, 297722.0, 112618.0, 11883.0, 290336.0, 92929.0, 40658.0, 35814.0, 305348.0, 259504.0, 215139.0, 21178.0, 549.0, 289040.0, 279450.0, 112286.0, 9265.0, 206276.0, 79305.0, 24653.0, 20839.0, 3898.0, 1000.0, 324184.0, 295112.0, 201663.0, 84861.0, 314896.0, 252097.0, 226809.0, 153412.0, 153760.0, 4854.0, 315739.0, 265263.0, 169371.0, 241327.0, 194635.0, 24737.0, 186518.0, 119967.0, 34153.0, 9043.0, 135743.0, 172843.0, 283537.0, 116289.0, 8631.0, 149153.0, 266190.0, 109841.0, 8624.0, 120330.0, 37995.0, 3649.0, 13056.0, 1000.0, 1000.0, 249167.0, 314185.0, 277960.0, 68441.0, 303495.0, 244663.0, 31671.0, 70988.0, 6863.0, 1000.0, 301512.0, 294414.0, 92241.0, 166853.0, 43361.0, 6513.0, 203144.0, 46111.0, 16099.0, 13226.0, 160216.0, 215785.0, 250855.0, 62063.0, 10381.0, 213157.0, 270088.0, 86796.0, 7477.0, 121763.0, 33210.0, 7450.0, 4721.0, 1000.0, 1000.0, 304043.0, 299679.0, 252000.0, 65035.0, 299944.0, 232042.0, 122807.0, 37593.0, 9294.0, 2282.0, 316760.0, 272305.0, 167922.0, 124953.0, 93525.0, 8649.0, 160015.0, 66915.0, 14927.0, 4399.0, 15194.0, 65271.0, 158986.0, 35441.0, 3302.0, 26481.0, 109313.0, 22979.0, 1000.0, 33082.0, 8474.0, 1000.0, 1000.0, 1000.0, 1000.0, 97782.0, 259942.0, 157962.0, 17897.0, 148762.0, 57192.0, 31731.0, 10077.0, 1000.0, 1000.0, 180938.0, 134771.0, 41246.0, 36210.0, 10474.0, 1000.0, 47342.0, 16083.0, 5848.0, 4375.0, 113341.0, 163399.0, 228203.0, 41956.0, 6146.0, 169257.0, 242457.0, 91150.0, 3468.0, 126599.0, 29630.0, 1000.0, 4484.0, 1000.0, 1000.0, 277877.0, 315622.0, 234812.0, 6332.0, 295832.0, 197531.0, 27117.0, 49557.0, 10043.0, 1000.0, 296861.0, 262007.0, 70355.0, 179247.0, 31856.0, 3470.0, 187884.0, 36795.0, 25230.0, 3241.0, 141346.0, 183874.0, 161008.0, 22318.0, 2634.0, 207354.0, 204977.0, 66715.0, 7248.0, 141304.0, 19035.0, 2928.0, 3675.0, 1000.0, 1000.0, 291660.0, 302949.0, 158667.0, 22125.0, 291087.0, 171986.0, 40058.0, 68078.0, 18734.0, 1000.0, 314157.0, 224827.0, 55092.0, 155076.0, 78797.0, 5872.0, 128198.0, 21686.0, 5991.0, 5423.0, 34463.0, 75214.0, 134364.0, 26812.0, 1000.0, 61237.0, 113745.0, 23822.0, 9524.0, 26060.0, 3621.0, 1000.0, 1000.0, 1000.0, 1000.0, 134481.0, 260344.0, 139178.0, 18679.0, 179797.0, 55727.0, 18053.0, 7215.0, 4517.0, 1000.0, 242295.0, 157198.0, 81828.0, 63151.0, 19038.0, 1000.0, 47964.0, 15171.0, 1000.0, 3617.0, 32466.0, 62239.0, 78782.0, 1000.0, 1000.0, 43351.0, 70438.0, 6640.0, 1000.0, 29192.0, 4443.0, 1000.0, 1000.0, 1000.0, 1000.0, 105194.0, 180770.0, 25432.0, 4275.0, 126696.0, 43833.0, 14329.0, 9974.0, 7553.0, 1000.0, 194869.0, 80132.0, 13726.0, 16147.0, 7324.0, 1000.0, 58701.0, 1000.0, 2365.0, 1000.0 },
 {277705.0, 263083.0, 251805.0, 212620.0, 103689.0, 267398.0, 258404.0, 213672.0, 103092.0, 262915.0, 238319.0, 28545.0, 105757.0, 10667.0, 3330.0, 267661.0, 258233.0, 230531.0, 216527.0, 263067.0, 244485.0, 187521.0, 258454.0, 36994.0, 1000.0, 264672.0, 253505.0, 222914.0, 262552.0, 165646.0, 12588.0, 265682.0, 193132.0, 39155.0, 39118.0, 267270.0, 258591.0, 245897.0, 203725.0, 31081.0, 266046.0, 257693.0, 220142.0, 50677.0, 259747.0, 173107.0, 7800.0, 47917.0, 1000.0, 1000.0, 262178.0, 258261.0, 226108.0, 137571.0, 265555.0, 233198.0, 102500.0, 189497.0, 31532.0, 1000.0, 263931.0, 240974.0, 163589.0, 249879.0, 72353.0, 10717.0, 255552.0, 122045.0, 13043.0, 4945.0, 261264.0, 253051.0, 223885.0, 156959.0, 7847.0, 261768.0, 229133.0, 146667.0, 2427.0, 213429.0, 53994.0, 6171.0, 6982.0, 4210.0, 1000.0, 261342.0, 242317.0, 213575.0, 41612.0, 248199.0, 214421.0, 36193.0, 80359.0, 5762.0, 1000.0, 250362.0, 224172.0, 63653.0, 159169.0, 33918.0, 3612.0, 146429.0, 37431.0, 3203.0, 1000.0, 263232.0, 233094.0, 140509.0, 28789.0, 1000.0, 206425.0, 151459.0, 19788.0, 2531.0, 79297.0, 8612.0, 1000.0, 4707.0, 3715.0, 1000.0, 246967.0, 205758.0, 109926.0, 24199.0, 141131.0, 66739.0, 6544.0, 30648.0, 5287.0, 1000.0, 190056.0, 102607.0, 31584.0, 44140.0, 8847.0, 4329.0, 24013.0, 8915.0, 3903.0, 1000.0, 213933.0, 101867.0, 21747.0, 2827.0, 3922.0, 78100.0, 40489.0, 5863.0, 1000.0, 19299.0, 4513.0, 1003.0, 1000.0, 2163.0, 1000.0, 150598.0, 61470.0, 30682.0, 2874.0, 34510.0, 11430.0, 1000.0, 5975.0, 1000.0, 1000.0, 42321.0, 22965.0, 29633.0, 14613.0, 1823.0, 1000.0, 5316.0, 12568.0, 2730.0, 1000.0, 271485.0, 263461.0, 243708.0, 214842.0, 28760.0, 264956.0, 254437.0, 216016.0, 35424.0, 226163.0, 100230.0, 5954.0, 11474.0, 3463.0, 1000.0, 266229.0, 259554.0, 226743.0, 96994.0, 262020.0, 231234.0, 56475.0, 50614.0, 13107.0, 2843.0, 265040.0, 237411.0, 96926.0, 145129.0, 25724.0, 3568.0, 193574.0, 57342.0, 10848.0, 6631.0, 268996.0, 257188.0, 227188.0, 164723.0, 15197.0, 263424.0, 234319.0, 132852.0, 6550.0, 140079.0, 23451.0, 7293.0, 6011.0, 1000.0, 1000.0, 264999.0, 245450.0, 219123.0, 43761.0, 243325.0, 184503.0, 29335.0, 28581.0, 1000.0, 3919.0, 259427.0, 226745.0, 49496.0, 87026.0, 23823.0, 3960.0, 70463.0, 14962.0, 3278.0, 3188.0, 247795.0, 230443.0, 196387.0, 60515.0, 1000.0, 165918.0, 161442.0, 32067.0, 2318.0, 35990.0, 8455.0, 3277.0, 3948.0, 1000.0, 1000.0, 245429.0, 237925.0, 155065.0, 31715.0, 153131.0, 73359.0, 2783.0, 20951.0, 5692.0, 1000.0, 198457.0, 107724.0, 16250.0, 13431.0, 2122.0, 1000.0, 24274.0, 5150.0, 1000.0, 1000.0, 193051.0, 134496.0, 79395.0, 21219.0, 1000.0, 93321.0, 60244.0, 8325.0, 1000.0, 22073.0, 8463.0, 1000.0, 1000.0, 1000.0, 1000.0, 180909.0, 132587.0, 87988.0, 12655.0, 59171.0, 23783.0, 5448.0, 1000.0, 1709.0, 1000.0, 82258.0, 44839.0, 32857.0, 13037.0, 223.0, 1000.0, 9381.0, 1315.0, 1000.0, 1000.0, 219224.0, 221715.0, 233329.0, 111608.0, 3813.0, 121679.0, 149055.0, 54537.0, 3519.0, 32746.0, 9541.0, 1000.0, 1000.0, 1000.0, 1000.0, 216391.0, 250569.0, 195818.0, 10739.0, 116316.0, 31758.0, 2737.0, 1000.0, 1000.0, 1000.0, 199264.0, 123965.0, 20058.0, 11796.0, 6534.0, 1000.0, 31557.0, 4144.0, 1000.0, 1000.0, 173010.0, 179148.0, 187939.0, 47342.0, 2179.0, 78964.0, 90232.0, 18141.0, 1000.0, 16868.0, 11861.0, 1000.0, 1000.0, 1000.0, 1000.0, 175835.0, 215120.0, 118398.0, 14468.0, 63340.0, 34901.0, 10827.0, 3865.0, 1000.0, 1000.0, 117600.0, 57101.0, 11153.0, 16079.0, 2427.0, 1000.0, 24087.0, 1000.0, 1000.0, 1000.0, 92285.0, 93342.0, 74998.0, 5324.0, 2258.0, 38753.0, 36951.0, 6819.0, 2252.0, 7952.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 123020.0, 125765.0, 56936.0, 18600.0, 59168.0, 23645.0, 1000.0, 1000.0, 2303.0, 1000.0, 43273.0, 25224.0, 14918.0, 13912.0, 6534.0, 1000.0, 7200.0, 2452.0, 1000.0, 1000.0, 37564.0, 56097.0, 61323.0, 2623.0, 1706.0, 23682.0, 15052.0, 12403.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 49502.0, 67479.0, 26012.0, 2080.0, 12855.0, 5699.0, 2590.0, 1000.0, 1000.0, 1000.0, 17632.0, 8993.0, 3128.0, 1000.0, 1000.0, 1000.0, 8226.0, 1000.0, 1000.0, 1000.0, 24178.0, 30316.0, 36253.0, 10061.0, 1000.0, 13278.0, 16098.0, 6128.0, 1000.0, 1000.0, 1000.0, 2331.0, 1000.0, 1000.0, 1000.0, 40808.0, 40738.0, 27880.0, 4457.0, 11571.0, 1000.0, 1134.0, 1000.0, 1000.0, 1000.0, 19512.0, 17108.0, 1885.0, 1000.0, 321.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 5167.0, 16613.0, 18104.0, 1533.0, 1000.0, 3840.0, 3305.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 3738.0, 7365.0, 8307.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 3671.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 286753.0, 264400.0, 255304.0, 224455.0, 43714.0, 267094.0, 256791.0, 225548.0, 47950.0, 263902.0, 181730.0, 30357.0, 18630.0, 2414.0, 1000.0, 268214.0, 260662.0, 232239.0, 185510.0, 267179.0, 234325.0, 119907.0, 157388.0, 34896.0, 5120.0, 262201.0, 245108.0, 211889.0, 261282.0, 111542.0, 4624.0, 261255.0, 165769.0, 22448.0, 27091.0, 265470.0, 260328.0, 232099.0, 213204.0, 20938.0, 265265.0, 251782.0, 199428.0, 20185.0, 238581.0, 105534.0, 7986.0, 17651.0, 1000.0, 1000.0, 267010.0, 251172.0, 223957.0, 115455.0, 259955.0, 227744.0, 71448.0, 101064.0, 23928.0, 1000.0, 262536.0, 231336.0, 141909.0, 203429.0, 72837.0, 1000.0, 234070.0, 88393.0, 19596.0, 20180.0, 261885.0, 254546.0, 224955.0, 77656.0, 13829.0, 249155.0, 219621.0, 77399.0, 5739.0, 107778.0, 31695.0, 2981.0, 9413.0, 3529.0, 1000.0, 268066.0, 241111.0, 205062.0, 107728.0, 245004.0, 150541.0, 22235.0, 30897.0, 9425.0, 1000.0, 247652.0, 224290.0, 113222.0, 90623.0, 20656.0, 4683.0, 71473.0, 27158.0, 14820.0, 7246.0, 201978.0, 162494.0, 75756.0, 18263.0, 1000.0, 135725.0, 78098.0, 19256.0, 1000.0, 48438.0, 7700.0, 1000.0, 2426.0, 1831.0, 1000.0, 225284.0, 159123.0, 117444.0, 55603.0, 126009.0, 57259.0, 15392.0, 25273.0, 5018.0, 1000.0, 126824.0, 127357.0, 90015.0, 21163.0, 19710.0, 1000.0, 34899.0, 29144.0, 2305.0, 1000.0, 259403.0, 257431.0, 247569.0, 206839.0, 14429.0, 207061.0, 243983.0, 144562.0, 9526.0, 105580.0, 22851.0, 2260.0, 1000.0, 1000.0, 1000.0, 265120.0, 255583.0, 228388.0, 91172.0, 254119.0, 204670.0, 58487.0, 20908.0, 5874.0, 1000.0, 264674.0, 236349.0, 95922.0, 64497.0, 25293.0, 5162.0, 124655.0, 48645.0, 6116.0, 1000.0, 205665.0, 255383.0, 228745.0, 115999.0, 13816.0, 185238.0, 213415.0, 70187.0, 7759.0, 48105.0, 18661.0, 1000.0, 6319.0, 1000.0, 1000.0, 254543.0, 243051.0, 216666.0, 97241.0, 215545.0, 135284.0, 27529.0, 25579.0, 8241.0, 1000.0, 254276.0, 219140.0, 105162.0, 65565.0, 27812.0, 1000.0, 81944.0, 15403.0, 1000.0, 4320.0, 148797.0, 185713.0, 166388.0, 41177.0, 10995.0, 129149.0, 99799.0, 32892.0, 1000.0, 33103.0, 7817.0, 2772.0, 6853.0, 2160.0, 1000.0, 219878.0, 222324.0, 169708.0, 111544.0, 120875.0, 63160.0, 17380.0, 10274.0, 1392.0, 1000.0, 180364.0, 142340.0, 139508.0, 13932.0, 7745.0, 1000.0, 27771.0, 33663.0, 6252.0, 6888.0, 76828.0, 134994.0, 193230.0, 71055.0, 3890.0, 38896.0, 93490.0, 26634.0, 3729.0, 12823.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 101938.0, 226179.0, 141227.0, 30068.0, 63022.0, 21329.0, 7504.0, 7826.0, 1000.0, 2905.0, 123360.0, 101516.0, 21988.0, 11347.0, 5434.0, 1000.0, 19495.0, 6180.0, 1000.0, 1000.0, 55215.0, 101081.0, 125675.0, 41688.0, 6170.0, 41495.0, 71658.0, 17804.0, 4576.0, 6704.0, 2109.0, 1000.0, 1000.0, 1000.0, 1000.0, 148738.0, 194351.0, 129552.0, 34947.0, 46219.0, 38828.0, 11745.0, 3330.0, 1000.0, 1000.0, 113823.0, 63981.0, 49293.0, 6964.0, 501.0, 1000.0, 12736.0, 5841.0, 1000.0, 1000.0, 4268.0, 29657.0, 44636.0, 11134.0, 1000.0, 1000.0, 11563.0, 6475.0, 2167.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 22516.0, 51291.0, 20816.0, 13958.0, 4528.0, 6243.0, 3073.0, 1000.0, 1000.0, 1000.0, 24942.0, 7337.0, 4286.0, 2296.0, 1000.0, 1000.0, 1000.0, 6930.0, 1000.0, 1000.0, 251172.0, 257380.0, 244265.0, 211037.0, 14128.0, 185669.0, 251935.0, 133284.0, 6372.0, 173274.0, 58637.0, 2895.0, 11948.0, 1000.0, 1000.0, 267768.0, 257945.0, 226206.0, 105832.0, 260476.0, 219536.0, 47892.0, 49351.0, 8305.0, 1000.0, 263396.0, 240800.0, 118796.0, 159642.0, 28686.0, 5386.0, 189090.0, 90849.0, 10098.0, 5454.0, 173966.0, 230334.0, 235480.0, 89788.0, 12953.0, 162853.0, 219937.0, 76460.0, 6185.0, 82637.0, 40195.0, 1000.0, 2449.0, 1000.0, 1000.0, 253253.0, 251779.0, 220066.0, 143756.0, 225021.0, 158459.0, 16177.0, 23424.0, 8346.0, 1000.0, 258706.0, 229141.0, 155210.0, 113055.0, 23895.0, 1000.0, 114880.0, 42034.0, 7220.0, 6508.0, 110153.0, 147100.0, 117829.0, 15237.0, 4600.0, 102396.0, 109551.0, 26816.0, 2036.0, 31996.0, 15062.0, 862.0, 4749.0, 2000.0, 1000.0, 218837.0, 216292.0, 149428.0, 89981.0, 131107.0, 62632.0, 16237.0, 9140.0, 1000.0, 1042.0, 171147.0, 135866.0, 153079.0, 46839.0, 9512.0, 3482.0, 30876.0, 33550.0, 1000.0, 1000.0, 67872.0, 97832.0, 228909.0, 104429.0, 2839.0, 54945.0, 132899.0, 49640.0, 8480.0, 21702.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 125093.0, 253629.0, 220503.0, 61658.0, 110773.0, 81409.0, 19480.0, 3976.0, 2651.0, 1000.0, 193831.0, 199898.0, 86555.0, 29319.0, 10900.0, 1000.0, 50293.0, 30326.0, 1000.0, 3464.0, 62226.0, 137873.0, 171806.0, 76998.0, 9009.0, 90710.0, 109757.0, 18288.0, 3948.0, 35459.0, 9317.0, 1000.0, 1000.0, 1000.0, 1000.0, 180279.0, 234132.0, 190438.0, 131765.0, 111489.0, 30820.0, 11373.0, 9459.0, 1480.0, 1000.0, 167097.0, 168653.0, 156429.0, 14373.0, 8281.0, 1000.0, 34634.0, 53636.0, 3162.0, 1000.0, 13547.0, 72422.0, 110647.0, 26289.0, 3262.0, 18446.0, 30797.0, 8532.0, 5182.0, 5126.0, 2033.0, 1000.0, 1000.0, 1000.0, 1000.0, 49982.0, 141400.0, 94673.0, 66464.0, 26310.0, 11175.0, 4886.0, 4917.0, 1000.0, 1000.0, 50654.0, 35535.0, 15077.0, 6021.0, 1000.0, 1000.0, 6826.0, 8166.0, 1000.0, 1000.0, 27975.0, 60128.0, 182242.0, 75702.0, 7305.0, 45187.0, 100500.0, 25962.0, 1000.0, 18767.0, 5645.0, 5689.0, 1000.0, 1000.0, 1000.0, 77675.0, 244997.0, 186046.0, 57837.0, 128696.0, 72151.0, 12800.0, 6287.0, 9114.0, 1000.0, 167425.0, 181250.0, 33653.0, 48374.0, 11576.0, 1000.0, 58327.0, 24999.0, 2454.0, 1000.0, 32113.0, 60769.0, 102394.0, 25801.0, 5417.0, 37589.0, 80686.0, 13123.0, 4924.0, 19120.0, 6724.0, 1000.0, 1000.0, 1000.0, 1000.0, 78795.0, 201603.0, 142033.0, 100864.0, 78788.0, 40885.0, 15013.0, 5579.0, 6452.0, 1000.0, 162780.0, 126342.0, 145251.0, 16705.0, 4137.0, 1000.0, 41412.0, 28584.0, 9411.0, 1000.0, 13853.0, 37499.0, 124371.0, 26189.0, 5014.0, 19946.0, 38420.0, 16909.0, 3874.0, 2453.0, 2582.0, 2318.0, 1000.0, 1000.0, 1000.0, 28050.0, 116387.0, 123996.0, 71882.0, 30337.0, 22527.0, 3835.0, 2263.0, 1000.0, 1000.0, 67835.0, 63239.0, 58251.0, 8239.0, 4543.0, 1000.0, 14516.0, 7240.0, 1000.0, 1000.0, 6325.0, 14123.0, 35821.0, 4484.0, 1000.0, 3862.0, 16104.0, 7352.0, 1000.0, 2641.0, 4370.0, 1000.0, 1000.0, 1000.0, 1000.0, 12607.0, 90473.0, 45649.0, 21345.0, 25653.0, 15834.0, 1000.0, 3691.0, 1000.0, 1000.0, 64038.0, 41605.0, 23995.0, 3766.0, 1000.0, 1000.0, 7632.0, 1000.0, 1000.0, 1584.0 },
 {219560.0, 206174.0, 192152.0, 153625.0, 48787.0, 207535.0, 196838.0, 161422.0, 70534.0, 200226.0, 175968.0, 58182.0, 184932.0, 30905.0, 1000.0, 211875.0, 189831.0, 168633.0, 115589.0, 206141.0, 180471.0, 138893.0, 196795.0, 124610.0, 39232.0, 203752.0, 180681.0, 151861.0, 200446.0, 161612.0, 75385.0, 199104.0, 138638.0, 79456.0, 8402.0, 213016.0, 196599.0, 181713.0, 157002.0, 24685.0, 209482.0, 189285.0, 168040.0, 21426.0, 200509.0, 172045.0, 19907.0, 168273.0, 10229.0, 1000.0, 211512.0, 192262.0, 169492.0, 47440.0, 204084.0, 174146.0, 91583.0, 187405.0, 61762.0, 15551.0, 208419.0, 174790.0, 84748.0, 189909.0, 109189.0, 32581.0, 186122.0, 48343.0, 19295.0, 17357.0, 208349.0, 197623.0, 170772.0, 85998.0, 6020.0, 202628.0, 173957.0, 140870.0, 4324.0, 183918.0, 142098.0, 9717.0, 77119.0, 4474.0, 1901.0, 207564.0, 183291.0, 155798.0, 18600.0, 186565.0, 173331.0, 38777.0, 176596.0, 33906.0, 19336.0, 186137.0, 171172.0, 15636.0, 174542.0, 37312.0, 28592.0, 144558.0, 11418.0, 15758.0, 3220.0, 209434.0, 188723.0, 152504.0, 12841.0, 1000.0, 191490.0, 171382.0, 37216.0, 2389.0, 166558.0, 55715.0, 4007.0, 25859.0, 5710.0, 1391.0, 202155.0, 172500.0, 44195.0, 6994.0, 179628.0, 118617.0, 12898.0, 80521.0, 18111.0, 11945.0, 186814.0, 69894.0, 8356.0, 97737.0, 16400.0, 13055.0, 32083.0, 3206.0, 2653.0, 1000.0, 194719.0, 160016.0, 32318.0, 1597.0, 1000.0, 178842.0, 85184.0, 7764.0, -152.0, 82702.0, 14160.0, 1026.0, 2074.0, 1612.0, 1000.0, 181744.0, 98612.0, 12183.0, 245.0, 137188.0, 38852.0, 6975.0, 37296.0, 10864.0, 11802.0, 92396.0, 13769.0, 1924.0, 25468.0, 8116.0, 6991.0, 8131.0, 2220.0, 2377.0, 1000.0, 215750.0, 206298.0, 173817.0, 141587.0, 19076.0, 210540.0, 194157.0, 171332.0, 16323.0, 191593.0, 144000.0, 18456.0, 62312.0, 3765.0, 1000.0, 209401.0, 195710.0, 170623.0, 59506.0, 201432.0, 178912.0, 52517.0, 169327.0, 24391.0, 2580.0, 203818.0, 177438.0, 68100.0, 191213.0, 62581.0, 6230.0, 179922.0, 42934.0, 12134.0, 4149.0, 211943.0, 197447.0, 171974.0, 79122.0, 4466.0, 207130.0, 176062.0, 151939.0, 10259.0, 176019.0, 109007.0, 5017.0, 20331.0, 8296.0, 1000.0, 208439.0, 185971.0, 165491.0, 22268.0, 193229.0, 166919.0, 49528.0, 139336.0, 14801.0, 2257.0, 194393.0, 172742.0, 52697.0, 177403.0, 46555.0, 8562.0, 138086.0, 15513.0, 12704.0, 5010.0, 208473.0, 189765.0, 152036.0, 35250.0, 1000.0, 198678.0, 175689.0, 50672.0, 9721.0, 145833.0, 61717.0, 1547.0, 10772.0, 3235.0, 1000.0, 202826.0, 174393.0, 86207.0, 4668.0, 178808.0, 130240.0, 28587.0, 68032.0, 22438.0, 3231.0, 186797.0, 125490.0, 20952.0, 76097.0, 20843.0, 1461.0, 39783.0, 8475.0, 3084.0, 2252.0, 191516.0, 176477.0, 43491.0, 6162.0, 2070.0, 176312.0, 104338.0, 19991.0, 1160.0, 51982.0, 22066.0, 5256.0, 6855.0, 490.0, 1000.0, 186950.0, 149779.0, 41716.0, 157.0, 150987.0, 78889.0, 17658.0, 24644.0, 9853.0, 1404.0, 140199.0, 59454.0, 6786.0, 29944.0, 22809.0, 5012.0, 12254.0, 4593.0, 8402.0, 1000.0, 213540.0, 200065.0, 175462.0, 56618.0, 4742.0, 182185.0, 157390.0, 52028.0, 4477.0, 65097.0, 12777.0, 2426.0, 3138.0, 1000.0, 1000.0, 207696.0, 191492.0, 153459.0, 13805.0, 178746.0, 91376.0, 11702.0, 20091.0, 1000.0, 1000.0, 189649.0, 132547.0, 19777.0, 37111.0, 6239.0, 1000.0, 46413.0, 8598.0, 3044.0, 1000.0, 206486.0, 193957.0, 123969.0, 24646.0, 2885.0, 196819.0, 145266.0, 31358.0, 1078.0, 38999.0, 18256.0, 4265.0, 3091.0, 1000.0, 1000.0, 195382.0, 174968.0, 74567.0, 8860.0, 159030.0, 68209.0, 17532.0, 14049.0, 1000.0, 1000.0, 145587.0, 80590.0, 18852.0, 42319.0, 12932.0, 2071.0, 12869.0, 8843.0, 3639.0, 1000.0, 208993.0, 174623.0, 70203.0, 7335.0, 749.0, 145787.0, 86097.0, 32271.0, 1945.0, 26401.0, 12899.0, 337.0, 1000.0, 1000.0, 1000.0, 184340.0, 139082.0, 43100.0, 8626.0, 98159.0, 32858.0, 17445.0, 4877.0, 4937.0, 1000.0, 97772.0, 60711.0, 13512.0, 20339.0, 9556.0, 1000.0, 19759.0, 2392.0, 1458.0, 1000.0, 103586.0, 59233.0, 45613.0, 11514.0, 1000.0, 24154.0, 31379.0, 7511.0, 2125.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 66889.0, 96852.0, 27526.0, 1608.0, 29081.0, 9649.0, 1000.0, 1000.0, 1000.0, 1000.0, 33649.0, 20304.0, 4711.0, 1000.0, 1000.0, 1000.0, 4760.0, 1724.0, 1000.0, 2581.0, 128397.0, 82001.0, 36787.0, 6540.0, 3334.0, 52823.0, 18405.0, 2820.0, 1000.0, 10742.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 98097.0, 76621.0, 31707.0, 7382.0, 43770.0, 15906.0, 1570.0, 1000.0, 1000.0, 1000.0, 44102.0, 31349.0, 14088.0, 2917.0, 1000.0, 1000.0, 1000.0, 5527.0, 3482.0, 1000.0, 21198.0, 6633.0, 13676.0, 1891.0, 1585.0, 7764.0, 9606.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0, 26633.0, 20105.0, 3132.0, 4477.0, 3709.0, 458.0, 1000.0, 1000.0, 1000.0, 1000.0, 6436.0, 2889.0, 3271.0, 1000.0, 1000.0, 1000.0, 3808.0, 1000.0, 1000.0, 1000.0, 216563.0, 206713.0, 179419.0, 169995.0, 16982.0, 209554.0, 196822.0, 172250.0, 31217.0, 207413.0, 174939.0, 45869.0, 167866.0, 16909.0, 3731.0, 211547.0, 197049.0, 174198.0, 82602.0, 204925.0, 175490.0, 121734.0, 196490.0, 105857.0, 19949.0, 210958.0, 181106.0, 135404.0, 199878.0, 146595.0, 89146.0, 197388.0, 105968.0, 68263.0, 34115.0, 216084.0, 201844.0, 177429.0, 131069.0, 2416.0, 210043.0, 190573.0, 163772.0, 21768.0, 197163.0, 172076.0, 29574.0, 132632.0, 12971.0, 3743.0, 210132.0, 189867.0, 170994.0, 38565.0, 194350.0, 172030.0, 109644.0, 180127.0, 104200.0, 31077.0, 200841.0, 176436.0, 71195.0, 186242.0, 110164.0, 63499.0, 183795.0, 48380.0, 41532.0, 9853.0, 209943.0, 201503.0, 175091.0, 42977.0, 1954.0, 206714.0, 175372.0, 87475.0, 11732.0, 173913.0, 117608.0, 16291.0, 61030.0, 10070.0, 1000.0, 211864.0, 184646.0, 142051.0, 14696.0, 194908.0, 169922.0, 78353.0, 172770.0, 84428.0, 26946.0, 193886.0, 172996.0, 27734.0, 172673.0, 92005.0, 46928.0, 149211.0, 26676.0, 18581.0, 1000.0, 204008.0, 171461.0, 75245.0, 4151.0, 402.0, 179193.0, 155311.0, 28532.0, 714.0, 141552.0, 61986.0, 12707.0, 23352.0, 7229.0, 2995.0, 195371.0, 165048.0, 52764.0, 11886.0, 173889.0, 122462.0, 40080.0, 99115.0, 52204.0, 16885.0, 177681.0, 81089.0, 14544.0, 100825.0, 78149.0, 45125.0, 36054.0, 7762.0, 13117.0, 3137.0, 211822.0, 202111.0, 183553.0, 123226.0, 10955.0, 208322.0, 189649.0, 158232.0, 13917.0, 186376.0, 110681.0, 10383.0, 22417.0, 1000.0, 3320.0, 208682.0, 193040.0, 172203.0, 48785.0, 198733.0, 175262.0, 59674.0, 137877.0, 26493.0, 3393.0, 200813.0, 173371.0, 76824.0, 178430.0, 61209.0, 16190.0, 170471.0, 42492.0, 9428.0, 3013.0, 210046.0, 197786.0, 172232.0, 53020.0, 7264.0, 200373.0, 179856.0, 110886.0, 12328.0, 174044.0, 83766.0, 12923.0, 17468.0, 9318.0, 1000.0, 205406.0, 184004.0, 164796.0, 34333.0, 191824.0, 170243.0, 85490.0, 109259.0, 26600.0, 4802.0, 192792.0, 171959.0, 71438.0, 170684.0, 93343.0, 10105.0, 128463.0, 48891.0, 15000.0, 1944.0, 205947.0, 185453.0, 119606.0, 13930.0, 52.0, 192883.0, 162715.0, 64847.0, 9247.0, 119734.0, 40915.0, 6639.0, 3416.0, 1047.0, 1000.0, 198919.0, 172193.0, 100769.0, 29218.0, 175399.0, 135922.0, 86732.0, 66606.0, 40700.0, 4327.0, 179441.0, 135678.0, 67574.0, 119284.0, 115753.0, 19337.0, 71248.0, 50097.0, 16957.0, 6410.0, 210043.0, 168858.0, 153990.0, 39139.0, 1437.0, 145763.0, 140638.0, 42396.0, 1000.0, 47676.0, 17643.0, 4391.0, 1000.0, 1000.0, 1000.0, 193720.0, 180581.0, 126059.0, 12798.0, 165417.0, 82721.0, 24466.0, 17423.0, 5156.0, 1000.0, 154368.0, 125857.0, 28596.0, 68971.0, 12009.0, 4795.0, 33288.0, 18306.0, 1572.0, 3394.0, 207309.0, 174753.0, 108335.0, 22779.0, 1247.0, 173792.0, 116262.0, 36880.0, 2677.0, 46028.0, 8074.0, 8644.0, 1000.0, 1564.0, 1000.0, 198127.0, 171970.0, 102353.0, 30411.0, 157317.0, 101248.0, 46784.0, 16125.0, 6493.0, 1000.0, 172497.0, 119739.0, 107225.0, 51274.0, 28841.0, 1000.0, 41445.0, 41716.0, 5155.0, 1000.0, 56706.0, 51009.0, 44423.0, 7256.0, 1000.0, 39669.0, 34720.0, 3432.0, 1000.0, 3696.0, 2946.0, 1000.0, 1000.0, 1000.0, 1000.0, 82239.0, 86339.0, 56594.0, 13682.0, 22360.0, 11100.0, 1000.0, 1000.0, 269.0, 1000.0, 66274.0, 22370.0, 33933.0, 7827.0, 6053.0, 182.0, 6125.0, 17177.0, 1000.0, 1000.0, 215654.0, 205546.0, 181893.0, 118490.0, 11380.0, 207929.0, 189584.0, 167868.0, 12288.0, 194600.0, 169775.0, 24316.0, 78696.0, 6668.0, 1000.0, 207435.0, 201545.0, 170775.0, 39305.0, 204233.0, 174169.0, 100611.0, 187543.0, 89903.0, 23516.0, 201379.0, 178385.0, 80177.0, 193252.0, 100077.0, 34659.0, 187877.0, 65157.0, 44260.0, 8790.0, 212496.0, 203381.0, 172006.0, 44941.0, 3316.0, 198115.0, 184018.0, 128344.0, 10149.0, 181529.0, 137799.0, 23144.0, 50938.0, 11794.0, 2619.0, 204193.0, 193008.0, 162416.0, 30867.0, 198138.0, 169795.0, 114917.0, 173701.0, 130563.0, 30104.0, 204495.0, 173760.0, 73009.0, 177794.0, 151558.0, 51379.0, 176247.0, 48377.0, 33286.0, 9752.0, 210218.0, 185693.0, 104489.0, 22564.0, -309.0, 189094.0, 171208.0, 54866.0, 9519.0, 172244.0, 78279.0, 17896.0, 25288.0, 4464.0, 1000.0, 201021.0, 174900.0, 87394.0, 11127.0, 182348.0, 153240.0, 102322.0, 138470.0, 127110.0, 14379.0, 187307.0, 122075.0, 60003.0, 138469.0, 154809.0, 73720.0, 92477.0, 24820.0, 27569.0, 2695.0, 211834.0, 192563.0, 175357.0, 48643.0, 1000.0, 200910.0, 177647.0, 79689.0, 18610.0, 139203.0, 64374.0, 12681.0, 3146.0, 3959.0, 1000.0, 211644.0, 192270.0, 165618.0, 43178.0, 190608.0, 167685.0, 80615.0, 69796.0, 26514.0, 4573.0, 198657.0, 172219.0, 76975.0, 141438.0, 84659.0, 8761.0, 117355.0, 36523.0, 16440.0, 1729.0, 206025.0, 187692.0, 137452.0, 30517.0, 3157.0, 197433.0, 172103.0, 68786.0, 20149.0, 103197.0, 51749.0, 10918.0, 1000.0, 7268.0, 1000.0, 203430.0, 175167.0, 127951.0, 43224.0, 182294.0, 165690.0, 130674.0, 62960.0, 63140.0, 2615.0, 179167.0, 151600.0, 124012.0, 114593.0, 156475.0, 9987.0, 79229.0, 76736.0, 29028.0, 10385.0, 122541.0, 78357.0, 77019.0, 13903.0, 3038.0, 82832.0, 79617.0, 22711.0, 5074.0, 9212.0, 2105.0, 1000.0, 1000.0, 1000.0, 1000.0, 149909.0, 122337.0, 78191.0, 31113.0, 108940.0, 57329.0, 35353.0, 9287.0, 6882.0, 1000.0, 146606.0, 74657.0, 111454.0, 25517.0, 20838.0, 1000.0, 31277.0, 27944.0, 5671.0, 1000.0, 214745.0, 153159.0, 159999.0, 29237.0, 1702.0, 193402.0, 179644.0, 80011.0, 9922.0, 148716.0, 61796.0, 24967.0, 6794.0, 4453.0, 1000.0, 208692.0, 191785.0, 149809.0, 21279.0, 197377.0, 172033.0, 95180.0, 108930.0, 74192.0, 10969.0, 201278.0, 172806.0, 53782.0, 174853.0, 79399.0, 27287.0, 136845.0, 29784.0, 15267.0, 12133.0, 210767.0, 167950.0, 96233.0, 21222.0, 1000.0, 193427.0, 150624.0, 49838.0, 13167.0, 115742.0, 52262.0, 19580.0, 6344.0, 1057.0, 1000.0, 197532.0, 173679.0, 90666.0, 18327.0, 184021.0, 154737.0, 126121.0, 80573.0, 128403.0, 12310.0, 193834.0, 143986.0, 83478.0, 114964.0, 144397.0, 49281.0, 93905.0, 56144.0, 24583.0, 7393.0, 135061.0, 85932.0, 84784.0, 17377.0, 1558.0, 100569.0, 100771.0, 33121.0, 12032.0, 37581.0, 5869.0, 7026.0, 1000.0, 1000.0, 1000.0, 173774.0, 180636.0, 80085.0, 48950.0, 168561.0, 87551.0, 99738.0, 19980.0, 17758.0, 1000.0, 176428.0, 112301.0, 113614.0, 49499.0, 92388.0, 7484.0, 43202.0, 29249.0, 16400.0, 1499.0, 64561.0, 32800.0, 51815.0, 7082.0, 1000.0, 60344.0, 72201.0, 15515.0, 1000.0, 54723.0, 3964.0, 6357.0, 1000.0, 1000.0, 1000.0, 103907.0, 126145.0, 32878.0, 16183.0, 137704.0, 67967.0, 63860.0, 14892.0, 29372.0, 3082.0, 128041.0, 70693.0, 45608.0, 56870.0, 58463.0, 12345.0, 38860.0, 24154.0, 8160.0, 1000.0 } };
  
struct floorplan_structure floorplan; 
extern struct UnitRel rel_unit[TOTAL_STRUCTURES];

double Binv[THERMAL_NODES][SYSTEM_SIZE];
double Cexp[THERMAL_NODES][THERMAL_NODES];

int power[DIM_Y][DIM_X];
double power_trace[SYSTEM_SIZE];
double t_steady[THERMAL_NODES];

double TempTraceEnd[THERMAL_NODES];
double Tsteady[THERMAL_NODES];
double Tdifference[THERMAL_NODES];
int SystemFIT[DIM_X*DIM_Y];

int state_last[DIM_X*DIM_Y], starting_fit[DIM_X*DIM_Y], state_stability[DIM_X*DIM_Y];
void FLEA_init(){
    for(int i = 0; i < SYSTEM_SIZE; i++){
        state_last[i] = -1;
        starting_fit[i] = -1;
        state_stability[i] = 0;
    }
}

int getX(int id){
    return id%DIM_X;
}

int getY(int id){
    return (int)(id/DIM_Y);
}

int getSouth(int x, int y){
    if(y > 0){
        return(many_core[y-1][x].type);
    } else {
        return(-1);
    }
}

int getNorth(int x, int y){
    if(y < DIM_Y-1){
        return(many_core[y+1][x].type);
    } else {
        return(-1);
    }
}

int getEast(int x, int y){
    if(x < DIM_X-1){
        return(many_core[y][x+1].type);
    } else {
        return(-1);
    }
}

int getWest(int x, int y){
    if(x > 0){
        return(many_core[y][x-1].type);
    } else {
        return(-1);
    }
}


int getNorthEast(int x, int y){
    if(y < DIM_Y-1 && x < DIM_X-1){
        return(many_core[y+1][x+1].type);
    } else {
        return(-1);
    }
}

int getNorthWest(int x, int y){
    if(y < DIM_Y-1 && x > 0){
        return(many_core[y+1][x-1].type);
    } else {
        return(-1);
    }
}

int getSouthWest(int x, int y){
    if(y > 0 && x > 0){
        return(many_core[y-1][x-1].type);
    } else {
        return(-1);
    }
}

int getSouthEast(int x, int y){
    if(y > 0 && x < DIM_X-1){
        return(many_core[y-1][x+1].type);
    } else {
        return(-1);
    }
}


// A utility function to swap two elements 
void swap(int* a, int* b) { 
    int t = *a; 
    *a = *b; 
    *b = t; 
}

/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */
int partition (int arr[], int arr2[], int low, int high) { 
    int pivot = arr[high]; // pivot 
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
    int j;
    for (j = low; j <= (high - 1); j++) { 
        // If current element is smaller than the pivot 
        if (arr[j] < pivot) { 
            i++; // increment index of smaller element 
            swap(&arr[i], &arr[j]);
            swap(&arr2[i], &arr2[j]);
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    swap(&arr2[i + 1], &arr2[high]); 
    return (i + 1); 
} 

/* The main function that implements QuickSort 
arr[] --> Array to be sorted, 
low --> Starting index, 
high --> Ending index */
void quickSort(int arr[], int arr2[], int low, int high){ 
    if (low < high){ 
        /* pi is partitioning index, arr[p] is now 
        at right place */
        int pi = partition(arr, arr2, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, arr2, low, (pi - 1)); 
        quickSort(arr, arr2, (pi + 1), high); 
    }
}

void randPositions(int arr[], int arr2[], int low, int high){
    for(int i = low; i < (high-1); i++){
        if(arr[i] == arr[i+1]){
            if( 60 > random()%100 ){
                swap(&arr[i], &arr[i+1]);
                swap(&arr2[i], &arr2[i+1]);
            }
        }
    }
}



//The place of x will be informed by sucessives sums and the y by num(addr%DIM_X or DIM_Y)
unsigned int API_getPEState(unsigned int id){
    unsigned int x = getX(id), y = getY(id);
    int state_x, state_y, z, state, a;
    int dx, dy, dz;
    int state_dx, state_dy, state_d;

    unsigned int immediate[3], diagonal[3];
    
    for(a = 0; a < 3; a++){
        immediate[a] = 0;
        diagonal[a] = 0;
    }

    // SOUTH
    if(getSouth(x, y) != -1)
        immediate[getSouth(x,y)]++;
    // NORTH
    if(getNorth(x, y) != -1)
        immediate[getNorth(x,y)]++;
    // WEST
    if(getWest(x, y) != -1)
        immediate[getWest(x,y)]++;
    // EAST
    if(getEast(x, y) != -1)
        immediate[getEast(x,y)]++;

    // NORTH+EAST
    if(getNorthEast(x, y) != -1)
        diagonal[getNorthEast(x,y)]++;
    // NORTH+WEST
    if(getNorthWest(x, y) != -1)
        diagonal[getNorthWest(x,y)]++;
    // SOUTH+WEST
    if(getSouthWest(x, y) != -1)
        diagonal[getSouthWest(x,y)]++;
    // SOUTH+EAST
    if(getSouthEast(x, y) != -1)
        diagonal[getSouthEast(x,y)]++;
    
    x = immediate[0];
    y = immediate[1];
    z = immediate[2];

    dx = diagonal[0];
    dy = diagonal[1];
    dz = diagonal[2];


    state_x = (int)(x ? ((x*x*x - 18*x*x + 107*x) / 6) : 0);
    state_y = (int)(y ? ((11*y - y*y - 2*x*y) / 2) : 0);
    state = state_x + state_y + z;

    state_dx = (int)(dx ? ((dx*dx*dx - 18*dx*dx + 107*dx) / 6) : 0);
    state_dy = (int)(dy ? ((11*dy - dy*dy - 2*dx*dy) / 2) : 0);
    state_d  = state_dx + state_dy + dz;

    state = state + 35*state_d;

    //if(state == 14) printf("\n%d = (%d, %d, %d)\n", state, x, y, z);

    if(state >= 35*35){
        printf("ERRO CALCULANDO ESTADO: %d", state);
        while(1){}
    }
    return state;
}

unsigned int API_GetTaskSlotFromTile(unsigned int id, unsigned int app){
    if(many_core[getY(id)][getX(id)].taskSlot > 0){
        many_core[getY(id)][getX(id)].taskSlot = many_core[getY(id)][getX(id)].taskSlot - 1;
        if(many_core[getY(id)][getX(id)].type == -1){
            many_core[getY(id)][getX(id)].id = tasks[app].id;
            many_core[getY(id)][getX(id)].type = tasks[app].type;
            many_core[getY(id)][getX(id)].power = tasks[app].power;
            many_core[getY(id)][getX(id)].totalTime = tasks[app].totalTime;
            many_core[getY(id)][getX(id)].current_time = 0;
        }
        return 1;
    }else {
        return -1;
    }
}

int API_getMaxIdxfromRow(float scoreTable[N_TASKTYPE][N_STATES], unsigned int row){
    unsigned int max = 0, i;
    for( i = 1; i < N_STATES; i++){
        if(scoreTable[row][i] > scoreTable[row][max]){
            max = i;
        }
    }
    return max;
}

void API_PrintScoreTable(float scoreTable[N_TASKTYPE][N_STATES]){
    int i, j;
    FILE *fst, *fst2;
    fst = fopen("ScoreTable.tsv", "w");
    fst2 = fopen("ScoreTable_vector.tsv", "w");
    fprintf(fst2, "float scoreTable[N_TASKTYPE][N_STATES] = { ");
    for(i = 0; i < N_TASKTYPE; i++){
        fprintf(fst2, " {");
        for(j = 0; j < N_STATES; j++){
            fprintf(fst,"%d",(int)(scoreTable[i][j]*1000));
            fprintf(fst2,"%.1f",(float)((int)(scoreTable[i][j]*1000)));
            //fprintf(fst,"%d",(int)(scoreTable[i][j]*1000));
            if(j != N_STATES-1){
                fprintf(fst,"\t");
                fprintf(fst2,", ");
            }
        }
        fprintf(fst2, " }");
        if (i != N_TASKTYPE-1){
            fprintf(fst,"\n");
            fprintf(fst2,",\n");
        }
    }
    fprintf(fst2," };");
    fclose(fst);
    fclose(fst2);
}

void load_matrices(){
    FILE *binvpointer;
    binvpointer = fopen("20x20/binv.txt","r");
    FILE *cexppointer;
    cexppointer = fopen("20x20/cexp.txt","r");

    char line[1200000];
    char *number;
    int column, row;

    //printf("atira4");

    for (row = 0; row < THERMAL_NODES; row++){
        fgets(line, sizeof(line), binvpointer);
        number = strtok(line, " ");
        for(column = 0; column < SYSTEM_SIZE; column++){
            Binv[row][column] = strtod(number, NULL);
            //printf("%f ", Binv[row][column]); 
            number = strtok(NULL, " ");      
        }
    }


    for (row = 0; row < THERMAL_NODES; row++){
        fgets(line, sizeof(line), cexppointer);
        number = strtok(line, " ");
        for(column = 0; column < THERMAL_NODES; column++){
            Cexp[row][column] = strtod(number, NULL);
            //printf("%f ", Cexp[row][column]); 
            number = strtok(NULL, " ");      
        }
    }

    fclose(binvpointer);
    fclose(cexppointer);

    for(int i=0;i<THERMAL_NODES;i++){
        TempTraceEnd[i] = 313.15; // Kelvin
    }

    int unitc;
	for (unitc = 0; unitc < TOTAL_STRUCTURES; unitc++){
        sprintf(floorplan.units[unitc].name, "p%d", unitc);
        floorplan.units[unitc].height = 0.000194; // mem 8Kb
        floorplan.units[unitc].width = 0.000194; // mem 8Kb

        init(&floorplan, unitc);  /* Initialize structures*/
        fitinit(unitc);           /* Initialize FITS for each structure*/
    }
}

void calcula_temp(){ 
    int index = 0;
    // estimate the power consumption of each PE
    for (int yi = 0; yi < DIM_Y; yi++){
	    for(int xi = 0; xi < DIM_X; xi++){
		    float variation = (float)(rand()%30) - 15.0; // variates 15%
            variation = variation/100;
            if(many_core[yi][xi].type != -1){
                power_trace[index] = many_core[yi][xi].power + (many_core[yi][xi].power*variation);
                if (power_trace[index] < 0.1) 
                    power_trace[index] = 0.1;
            }
            else{
                power_trace[index] = 0.1;
            }
		    index++;
        }
	}

    // calculates the temperature of each PE
    int i, j;
    double heatContributionPower;

    for(i = 0; i < THERMAL_NODES; i++){
        heatContributionPower = 0;
        for(j = 0; j < SYSTEM_SIZE; j++){
            heatContributionPower += Binv[i][j]*power_trace[j];
        }
        Tsteady[i] = heatContributionPower + 318.15; // soma com Temperatura Ambiente
        Tdifference[i] = TempTraceEnd[i] - Tsteady[i]; // Iaçanã: trouxe pra cá esse calculo, estava em outro for()
    }

    //for(int k = 0; k < THERMAL_NODES; k++) Tdifference[k] = TempTraceEnd[k] - Tsteady[k];    

    for(int k = 0; k < THERMAL_NODES; k++){
        double sumExponentials = 0;
        for(j = 0; j < THERMAL_NODES; j++){
            sumExponentials += Cexp[k][j] * Tdifference[j];
        }
        TempTraceEnd[k] = Tsteady[k] + sumExponentials;
    }
}

void calcula_fit(){ 
    for (int structures=0; structures < TOTAL_STRUCTURES; structures++){
        /* Calculate FIT value by feeding in each structures temperature, activity
            * factor, processor supply voltage, and processor frequency. */
        //printf("Info: Temp : %f , Power: %f, strct = %d",TempTraceEnd[structures], power_trace[structures],structures);
        allmodels(TempTraceEnd[structures], power_trace[structures], 1.0, 1.0, structures);
	}

    //for(int i = 0; i < DIM_Y*DIM_X; i++) {}SystemFIT[i] = (int)rel_unit[i].ind_inst*100;

    int m, n, i = 0, avgFit = 0, totalFit = 0;
    for (n = 0; n < DIM_Y; n++){
        for (m = 0; m < DIM_X; m++){
            SystemFIT[i] = (int)rel_unit[i].ind_inst*100;
            avgFit = many_core[n][m].fit;
            // printsv("avgFit ", avgFit);
            totalFit = many_core[n][m].fit << 5;
            // printsv("totalFit1 ", totalFit);
            totalFit = totalFit - avgFit;
            // printsv("totalFit2 ", totalFit);
            totalFit = totalFit + SystemFIT[i];
            // printsv("totalFit3 ", totalFit);
            many_core[n][m].fit = totalFit >> 5;
            //printf("FIT %d => %d\n",i, many_core[n][m].fit);
            i++;
        }
    }
}

void manyCorePrint(){ 
    FILE *fss;
    char tipo[3];
    fss = fopen("SystemShot.tsv", "w");
    int id = 0;
    for(int j=0;j<DIM_Y;j++){
        for(int i=0;i<DIM_X;i++){
            if( many_core[j][i].type != -1 ) sprintf(tipo, "%d", many_core[j][i].type);
            else sprintf(tipo, "-");
            fprintf(fss,"(%2d,%2d){%s,%4d}\t",j, i, tipo, API_getPEState(id));
            id++;
        }
        fprintf(fss, "\n");
    }
    fclose(fss);
}

void printHeaders(){
    FILE *fl,*fpower,*fp;
#if LOG
    fl = fopen("data/FLEA_FITlog.tsv", "w");
    fp = fopen("data/FLEA_SystemTemperature.tsv", "w");
    fpower = fopen("data/FLEA_SystemPower.tsv", "w");
    fprintf(fp, "time");
    fprintf(fl, "time");
    fprintf(fpower, "time");
    for(int i=0;i<DIM_X*DIM_Y;i++){
        fprintf(fp, "\t%d",i);
        fprintf(fl, "\t%d",i);
        fprintf(fpower, "\t%d",i);
    }
    fprintf(fp, "\n");
    fprintf(fl, "\n");
    fprintf(fpower, "\n");
    fclose(fp);
    fclose(fl);
    fclose(fpower);
#endif
    return;
}

int readline(FILE *f, char *buffer, size_t len){
    char c; 
    int i;
    memset(buffer, 0, len);
    for (i = 0; i < len; i++){   
        int c = fgetc(f); 
        if (!feof(f)) {   
            if (c == '\r')
                buffer[i] = 0;
            else if (c == '\n'){   
                buffer[i] = 0;
                return i+1;
            }   
            else
            buffer[i] = c; 
        }   
        else{   
            return -1; 
        }   
    }   
    return -1; 
}

int getNextTask(){
    while(ftasks == NULL){
        ftasks = fopen("tasks", "r");
        printf("\nTasks file is open!\n");
    }
    char task[4];
    int task_i;
    readline(ftasks, task, 4);
    task_i = atoi(task);
    if(task_i == -1){
        fclose(ftasks);
    }
    return task_i;
}

void GROUPED_allocation(int task_to_allocate){
    int k = 0, slot;
    for(int i = 0; i < DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            slot = API_GetTaskSlotFromTile(k, task_to_allocate);
            k++;
            if (slot != -1){
                printf(" - Task %d allocated at addr: %dx%d", task_to_allocate, getY(k), getX(k));
                return;
            }
        }
    }
}

void FLEA_training_allocation(int task_to_allocate){
    float epsilon = 0.2;
    int sorted_id[DIM_X*DIM_Y], sorted_score[DIM_X*DIM_Y];
    int k = 0;
    for(int i = 0; i < DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            sorted_id[k] = k;
            sorted_score[k] = (int)(scoreTable[tasks[task_to_allocate].type][API_getPEState(k)]*1000);
            k++;
        }
    }
    k=0;
    quickSort(sorted_score, sorted_id, 0, (DIM_X*DIM_Y)-1);
    int id, slot;
    if((int)(epsilon*100) > random()%100){ 
        // try the worst tile slot
        if(random()%2 == 0){
            for(int i = 0; i > SYSTEM_SIZE-1; i++){
                id = sorted_id[i];
                slot = API_GetTaskSlotFromTile(id, task_to_allocate);
                if (slot != -1) break;
            }
        } else{ // try some random tile slot
            do{
                id = sorted_id[random()%SYSTEM_SIZE];
                slot = API_GetTaskSlotFromTile(id, task_to_allocate);
            }while(slot == -1);
        }
    } else{ // uses the learned information
        // try to get the best tile slot
        for(int i = (DIM_X*DIM_Y)-1; i >= 0; i--){
            id = sorted_id[i];
            slot = API_GetTaskSlotFromTile(id, task_to_allocate);
            if (slot != -1) break;
        }
    }
    printf(" - Task %d allocated at addr: %dx%d", task_to_allocate, getY(id), getX(id));
}

float Q_rsqrt( float number ){
    long i;
    float x2, y;
    const float threehalfs = 1.5F;

    x2 = number * 0.5F;
    y  = number;
    i  = * ( long * ) &y;                       // evil floating point bit level hacking
    i  = 0x5f3759df - ( i >> 1 );               // what the fuck?
    y  = * ( float * ) &i;
    y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
    // y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

    return y;
}



void FLEA_training(){
    int addr=0, slot=0, taskType=0, current_fit=0, toprint=0, state, tp,  maxid;
    
    //---------------------------------------
    // --------- Q-learning stuff -----------
    // Hyperparameters
    float alpha = 0.01;
    float gamma = 0.6;
    float oldvalue, maxval, reward, delta;

    FILE *freward;
    freward = fopen("Rewards.log", "a");
    
    for(int i = 0; i < SYSTEM_SIZE; i++){
        taskType = many_core[getY(i)][getX(i)].type;
        current_fit = many_core[getY(i)][getX(i)].fit;
        if(taskType != -1){ 
            state = API_getPEState(i);
            
            
            //printf("state: %d", state);
            // if the state has changed
            if(state != state_last[i]){ 
                state_last[i] = state;
                starting_fit[i] = many_core[getY(i)][getX(i)].fit;
                state_stability[i] = 0;
            } 
            else if ( state_stability[i] >= 200 ) {
                // calculates the reward
                delta = (float)((float)(current_fit/100) - (float)(starting_fit[i]/100))*0.003;
                reward = ((Q_rsqrt(10+(delta*delta)) * delta * -200)+100);
                fprintf(freward, "%.4f; %.4f\n", delta, reward);
                // printf("Delta: %.2f -- Current: %.2f Starting: %.2f \n",delta, (float)(current_fit/100),(float)(starting_fit[i]/100));
                // printf("Reward: %.2f\n",  reward);

                // gets the old value
                oldvalue = scoreTable[taskType][state];
                
                // gets the max value from the table
                //maxid = API_getMaxIdxfromRow(&(scoreTable[0][0]), taskType, N_STATES, N_TASKTYPE);
                maxid = API_getMaxIdxfromRow(scoreTable, taskType);
                maxval = scoreTable[taskType][maxid];
                // printf("MaxID: %d -- MaxVal: %.2f\n", maxid, maxval);

                // updates the score table
                scoreTable[taskType][state] = (((1 - alpha) * oldvalue) + (alpha * ( reward + (gamma * maxval))));
                // printf("OldValue: %.2f\n", oldvalue);
                // printf("NewValue: %.2f\n", scoreTable[taskType][state]);
                tableUpdates++;

                // saves the current FIT for the next update
                state_stability[i] = 0;
                starting_fit[i] = current_fit;
            }
            else{
                state_stability[i]++;
            }
        }
    }
    fclose(freward);
    // print score table
    API_PrintScoreTable(scoreTable);
    printf(" - Updates so far: %ld", tableUpdates);
}

int getOccupation(){
    int cont = 0;
    for(int i = 0; i<DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            if(many_core[j][i].type != -1){
                cont++;
            }
        }
    }
    return ((cont*100)/SYSTEM_SIZE);
}


int main(int argc, char *argv[]){

    srand(time(0));

    // leitura dos arquivos binv e cexp do TEA
    load_matrices();

    if(powerlog == NULL){
        powerlog = fopen("data/FLEA_SystemPower.tsv", "a");
    }
    if(fp == NULL){
        fp = fopen("data/FLEA_SystemTemperature.tsv", "a");
    }  
    if(fitlog == NULL){
        fitlog = fopen("data/FLEA_FITlog.tsv", "a");
    }

    // manycore model initializing
    for(int i=0;i<DIM_X;++i){
        for(int j=0;j<DIM_Y;++j){
            many_core[j][i].id = 0;
            many_core[j][i].type = -1;
            many_core[j][i].power = 0.1;
            many_core[j][i].totalTime = -1;
            many_core[j][i].taskSlot = 1;
            many_core[j][i].current_time = 0;
            many_core[j][i].fit = 1000;
            many_core[j][i].temp = 0;
        }
    }

    printHeaders();

    int cont=0, allocate_task=-1;
    
    /* FLEA INITIALIZATION */
    FLEA_init();
    for(int i = 0; i < N_TASKTYPE; i++){
        for(int j = 0; j < N_STATES; j++ ){
            //scoreTable[i][j] = scoreTable[i][j] - scoreTable[i][j] + (float)random()%2000;
            //scoreTable[i][j] = 1000.0;
            scoreTable[i][j] = scoreTable[i][j] / 1000.0;
        }
    }
    
    while(1){
        int barra_ene = 0;    
        printf("\rTime: %.3fs - SysOc: %d",((float)cont/1000), getOccupation());
        cont++;

        // updates the temperature and FIT
        calcula_temp();
        calcula_fit();   

        // run until 1 sec of simulation
        if(cont == 36000000){
            break; 
        } else if( cont % 100 == 0 ){
            manyCorePrint();
        }
        // STARTING SIMULATION...
        // if the time is over 20 ms start to evaluate the system
        else if(cont>20){
            
            // checks if the system is running at target occupation
            if( getOccupation() < int(20*sin(cont/1000) + TARGET_OCCUPATION)  ){
                allocate_task = getNextTask();
                
                if(allocate_task != -1){
                    FLEA_training_allocation(allocate_task); barra_ene = 1;
                    
                    //GROUPED_allocation(allocate_task); barra_ene = 1;
                }
            }
            if(cont > 1000) FLEA_training();
        }

        // write the time into the log files:
#if LOG
        fprintf(fitlog, "%.5f", ((float)cont/1000));
        fprintf(powerlog, "%.5f", ((float)cont/1000));
        fprintf(fp, "%.5f", ((float)cont/1000));
#endif
        for(int i=0;i<SYSTEM_SIZE;++i){
#if LOG
            // write info into the log files
            fprintf(powerlog,"\t%f",power_trace[i]);
            fprintf(fp, "\t%.2f", (((float)(TempTraceEnd[i]*100)/100)-273.15));
            fprintf(fitlog,"\t%f",rel_unit[i].ind_inst);
#endif  
            if(many_core[getY(i)][getX(i)].type != -1) { 
                // checks if the task has finished
                if(many_core[getY(i)][getX(i)].current_time >= many_core[getY(i)][getX(i)].totalTime) {
                    printf(" - Task %d dealocated from addr %dx%d",many_core[getY(i)][getX(i)].id,(int)i/DIM_X, i%DIM_X ); barra_ene = 1;
                    //manyCorePrint();
                    //getchar();
                    many_core[getY(i)][getX(i)].id = 0;
                    many_core[getY(i)][getX(i)].type = -1;
                    many_core[getY(i)][getX(i)].power = 0.1;
                    many_core[getY(i)][getX(i)].totalTime = -1;
                    many_core[getY(i)][getX(i)].current_time = 0;
                    many_core[getY(i)][getX(i)].taskSlot = 1;
                    many_core[getY(i)][getX(i)].type = -1;
                }
                else{
                    // increase the task running counter 
                    many_core[getY(i)][getX(i)].current_time++;
                }
            }
        }
#if LOG
        fprintf(fitlog,     "\n");
        fprintf(powerlog,   "\n");
        fprintf(fp,         "\n");
#endif
        if(barra_ene) printf("\n");
    }
    return 0;
}