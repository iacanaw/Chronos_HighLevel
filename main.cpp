#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <bits/stdc++.h>
#include <math.h>
#include "reliability.h"
#include "utils.h"

#define N_STATES 35*35
#define LOG 0

unsigned int tableUpdates[N_TASKTYPE][N_STATES];

// pointer to read the tasks
FILE *ftasks = NULL;
FILE *powerlog = NULL;
FILE *fitlog = NULL;
FILE *fp = NULL;

struct Tasks{
    int id,type;
    float power;
    int totalTime, taskSlot, fit,temp, current_time;
};

Tasks many_core [DIM_Y][DIM_X];

// Tasks tasks [NUM_TASKS] =  {{0,2,0.350,1467,0},{1,1,0.242,1228,0},{2,0,0.190,607,0},{3,0,0.172,1999,0},
//                             {4,0,0.167,1223,0},{5,0,0.162,1399,0},{6,0,0.154,1409,0},{7,2,0.359,1138,0},
//                             {8,2,0.350,1603,0},{9,1,0.242,1835,0},{10,0,0.190,1243,0},{11,0,0.172,1756,0},
//                             {12,0,0.167,639,0},{13,0,0.162,547,0},{14,0,0.154,1073,0},{15,2,0.359,819,0}};

Tasks tasks [NUM_TASKS] =  {{0,2,0.350,467}, {1,1,0.242,228}, {2,0,0.190,607},  {3,0,0.172,999},
                            {4,0,0.167,223}, {5,0,0.162,399}, {6,0,0.154,409}, {7,2,0.359,138},
                            {8,2,0.472,603}, {9,0,0.135,835}, {10,0,0.151,243},{11,0,0.141,756},
                            {12,2,0.469,639}, {13,2,0.474,547}, {14,2,0.477,073},{15,2,0.459,819},
                            {16,1,0.271,479},{17,1,0.282,980},
                            {18,2,0.343,925},{19,2,0.362,669},{20,2,0.360,819}, {21,2,0.347,606},{22,2,0.364,930},{23,1,0.251,633},
                            {24,0,0.187,934}, {25,0,0.188,644}, {26,0,0.188,648}, {27,0,0.196,630}, {28,0,0.206,484},{29,0,0.116,610},{30,2,0.353,422},
                            {31,2,0.485,353},{32,2,0.382,776},{33,1,0.256,683},{34,1,0.326,371},{35,2,0.428,632},{36,1,0.263,910},{37,2,0.341,458}};


// Score table populated with high values!

float scoreTable[N_TASKTYPE][N_STATES] = {  {315006.0, 283876.0, 273290.0, 268754.0, 245962.0, 286678.0, 285459.0, 268169.0, 256163.0, 286319.0, 281490.0, 249770.0, 273621.0, 174160.0, 20573.0, 287071.0, 287590.0, 283792.0, 267160.0, 287771.0, 285419.0, 277228.0, 286254.0, 268211.0, 158697.0, 287991.0, 285932.0, 278573.0, 286510.0, 281752.0, 262424.0, 288867.0, 286895.0, 271814.0, 268474.0, 282188.0, 282465.0, 283094.0, 269153.0, 231689.0, 286758.0, 280750.0, 264975.0, 243786.0, 287867.0, 266418.0, 257555.0, 263290.0, 178262.0, 19686.0, 287642.0, 285322.0, 269658.0, 270313.0, 289413.0, 274671.0, 268023.0, 284893.0, 266563.0, 161456.0, 285429.0, 283293.0, 270100.0, 285434.0, 272505.0, 255803.0, 284367.0, 273745.0, 267219.0, 251261.0, 280979.0, 279606.0, 273998.0, 260232.0, 206044.0, 281513.0, 274451.0, 263395.0, 235171.0, 278761.0, 261759.0, 232209.0, 244012.0, 174880.0, 27581.0, 287406.0, 281892.0, 268952.0, 259165.0, 284459.0, 271772.0, 265151.0, 283920.0, 256273.0, 148604.0, 287798.0, 278297.0, 264046.0, 286923.0, 266699.0, 247003.0, 283676.0, 267399.0, 254567.0, 209725.0, 280157.0, 283337.0, 278569.0, 248691.0, 139824.0, 281345.0, 281998.0, 263889.0, 204840.0, 280494.0, 254461.0, 205949.0, 157392.0, 134336.0, 26649.0, 284359.0, 280353.0, 269124.0, 221833.0, 280027.0, 271526.0, 250653.0, 269685.0, 244453.0, 129839.0, 279665.0, 272789.0, 236079.0, 276684.0, 255627.0, 223371.0, 270868.0, 227445.0, 216346.0, 123374.0, 281106.0, 276420.0, 260821.0, 191281.0, 63724.0, 279400.0, 268683.0, 215848.0, 96504.0, 240236.0, 199213.0, 116250.0, 77737.0, 69495.0, 11230.0, 282001.0, 275509.0, 237011.0, 140898.0, 274505.0, 256078.0, 231148.0, 228175.0, 219361.0, 70656.0, 275011.0, 252424.0, 200271.0, 250226.0, 242505.0, 153409.0, 207615.0, 150993.0, 125760.0, 43857.0, 283608.0, 283033.0, 283711.0, 268619.0, 209239.0, 285742.0, 282313.0, 276120.0, 228006.0, 283116.0, 278699.0, 223666.0, 225018.0, 141818.0, 8775.0, 287710.0, 283319.0, 273482.0, 266129.0, 283590.0, 279858.0, 271134.0, 285863.0, 250709.0, 98775.0, 283769.0, 284474.0, 268979.0, 286641.0, 276819.0, 223494.0, 287969.0, 274399.0, 235894.0, 223742.0, 287042.0, 284077.0, 276761.0, 262854.0, 209005.0, 287494.0, 284446.0, 267729.0, 234698.0, 282537.0, 266980.0, 230082.0, 232958.0, 177042.0, 27433.0, 286555.0, 282202.0, 274343.0, 255063.0, 285302.0, 272384.0, 265805.0, 285354.0, 252870.0, 141412.0, 286782.0, 274307.0, 269743.0, 281951.0, 267524.0, 225661.0, 286910.0, 264539.0, 247561.0, 214046.0, 287627.0, 278505.0, 277208.0, 261118.0, 172601.0, 284246.0, 276901.0, 269851.0, 226087.0, 265618.0, 260730.0, 209489.0, 142413.0, 134978.0, 21776.0, 281264.0, 281239.0, 270060.0, 243480.0, 281271.0, 271396.0, 255831.0, 269639.0, 239671.0, 128225.0, 277357.0, 276798.0, 259304.0, 277297.0, 261226.0, 215764.0, 274352.0, 242131.0, 231882.0, 172411.0, 282923.0, 282956.0, 268123.0, 222640.0, 65156.0, 280710.0, 266963.0, 248061.0, 152398.0, 253231.0, 218134.0, 123779.0, 85763.0, 80699.0, 17145.0, 283524.0, 281745.0, 261563.0, 213276.0, 281198.0, 266401.0, 246734.0, 229757.0, 212427.0, 79151.0, 276198.0, 269273.0, 249641.0, 256944.0, 251250.0, 150167.0, 235122.0, 214362.0, 154079.0, 82815.0, 282780.0, 279301.0, 278112.0, 251110.0, 130741.0, 274547.0, 282686.0, 262413.0, 191794.0, 248550.0, 244923.0, 172127.0, 144036.0, 74927.0, 6105.0, 282794.0, 284956.0, 276935.0, 238889.0, 279866.0, 269634.0, 245342.0, 247133.0, 215217.0, 45584.0, 284595.0, 280121.0, 257745.0, 270061.0, 244088.0, 133400.0, 271859.0, 244940.0, 175301.0, 142384.0, 279964.0, 275492.0, 275099.0, 250778.0, 128137.0, 272910.0, 271473.0, 261806.0, 205082.0, 208351.0, 230975.0, 196755.0, 52232.0, 79876.0, 5979.0, 279362.0, 282113.0, 270981.0, 225181.0, 273597.0, 272165.0, 238831.0, 224879.0, 221139.0, 72383.0, 279952.0, 274702.0, 244872.0, 264221.0, 239521.0, 167062.0, 253947.0, 235098.0, 191169.0, 128937.0, 276993.0, 280974.0, 269467.0, 203092.0, 78226.0, 265816.0, 269014.0, 229878.0, 128763.0, 202041.0, 193893.0, 108889.0, 50808.0, 41136.0, 17439.0, 284294.0, 282891.0, 261426.0, 227931.0, 279024.0, 265881.0, 216408.0, 190691.0, 184777.0, 67577.0, 274482.0, 262252.0, 255296.0, 246721.0, 211977.0, 115341.0, 214942.0, 193631.0, 129777.0, 60335.0, 142031.0, 170269.0, 214414.0, 139853.0, 54446.0, 89036.0, 190070.0, 144738.0, 72304.0, 46555.0, 86676.0, 50434.0, 14210.0, 13509.0, 6177.0, 183334.0, 254862.0, 245024.0, 153469.0, 172938.0, 215476.0, 178363.0, 79903.0, 111161.0, 40313.0, 206173.0, 238399.0, 199816.0, 152213.0, 179250.0, 56503.0, 117680.0, 150885.0, 71548.0, 44012.0, 121944.0, 220951.0, 220740.0, 141054.0, 54913.0, 136724.0, 205365.0, 152934.0, 60893.0, 71936.0, 93820.0, 61462.0, 8184.0, 18248.0, 1000.0, 253921.0, 270511.0, 239920.0, 149312.0, 218694.0, 220919.0, 168272.0, 116284.0, 92967.0, 34894.0, 241924.0, 236712.0, 193745.0, 151432.0, 162901.0, 46941.0, 134947.0, 101555.0, 71432.0, 19459.0, 9450.0, 26635.0, 43123.0, 19368.0, 3423.0, 6410.0, 35484.0, 35642.0, 14957.0, 3843.0, 10589.0, 11727.0, 1000.0, 6030.0, 1000.0, 37071.0, 102713.0, 57617.0, 35516.0, 37127.0, 55198.0, 42814.0, 9612.0, 13271.0, 8651.0, 49599.0, 51697.0, 46130.0, 26537.0, 45844.0, 6165.0, 15718.0, 29230.0, 27066.0, 11289.0, 284353.0, 285685.0, 278802.0, 269509.0, 237726.0, 287276.0, 283442.0, 267952.0, 244552.0, 287624.0, 275933.0, 250384.0, 263165.0, 197515.0, 34007.0, 287845.0, 286656.0, 273466.0, 265405.0, 285098.0, 282731.0, 273269.0, 282782.0, 267073.0, 172457.0, 285391.0, 282650.0, 275429.0, 287462.0, 279263.0, 264671.0, 287761.0, 275206.0, 271130.0, 268039.0, 286908.0, 283647.0, 280251.0, 264699.0, 224680.0, 286902.0, 278614.0, 268419.0, 245983.0, 287461.0, 265030.0, 244044.0, 258284.0, 222515.0, 54231.0, 286005.0, 282456.0, 274171.0, 263170.0, 281722.0, 273652.0, 268420.0, 287416.0, 267302.0, 208884.0, 287869.0, 281032.0, 270532.0, 284953.0, 269204.0, 263042.0, 282554.0, 269289.0, 267963.0, 254841.0, 286550.0, 282623.0, 272386.0, 267716.0, 206059.0, 282097.0, 281977.0, 269031.0, 222104.0, 277353.0, 271879.0, 230713.0, 196233.0, 209305.0, 29574.0, 284806.0, 283650.0, 276657.0, 245922.0, 280605.0, 279703.0, 262202.0, 284890.0, 256013.0, 205816.0, 282148.0, 276743.0, 257828.0, 283856.0, 265924.0, 250904.0, 277251.0, 259965.0, 252383.0, 223636.0, 286390.0, 286119.0, 268347.0, 226277.0, 109441.0, 285798.0, 270182.0, 251345.0, 173955.0, 270476.0, 240139.0, 186817.0, 141227.0, 124666.0, 40342.0, 282469.0, 273676.0, 265502.0, 216380.0, 280529.0, 263286.0, 252606.0, 264599.0, 249831.0, 145632.0, 282731.0, 268123.0, 243629.0, 274201.0, 256226.0, 210312.0, 269094.0, 228459.0, 211107.0, 111496.0, 288771.0, 285045.0, 282785.0, 267060.0, 218313.0, 281676.0, 286334.0, 262931.0, 235160.0, 285992.0, 271660.0, 235468.0, 232022.0, 181030.0, 29645.0, 284537.0, 286360.0, 276632.0, 263227.0, 286781.0, 276404.0, 264851.0, 278298.0, 258238.0, 152593.0, 285724.0, 277931.0, 268695.0, 275785.0, 268637.0, 242521.0, 283887.0, 269124.0, 257272.0, 237907.0, 287156.0, 285284.0, 274829.0, 268089.0, 208760.0, 282452.0, 283596.0, 268601.0, 231231.0, 273632.0, 262743.0, 227157.0, 185504.0, 194745.0, 23759.0, 281891.0, 284584.0, 276905.0, 256586.0, 280516.0, 280305.0, 262639.0, 272751.0, 254557.0, 196014.0, 281425.0, 279141.0, 265389.0, 282650.0, 265235.0, 245564.0, 281159.0, 269199.0, 253691.0, 227980.0, 287551.0, 285067.0, 266059.0, 247321.0, 150667.0, 284919.0, 269714.0, 256412.0, 203774.0, 264537.0, 251296.0, 201366.0, 122605.0, 140596.0, 25960.0, 281974.0, 277319.0, 266137.0, 243833.0, 287090.0, 268818.0, 252371.0, 261858.0, 236873.0, 153293.0, 282270.0, 267965.0, 255238.0, 269962.0, 254384.0, 219366.0, 268443.0, 238767.0, 220619.0, 163975.0, 239479.0, 272078.0, 269941.0, 242554.0, 124040.0, 233994.0, 270671.0, 251584.0, 190626.0, 177174.0, 212170.0, 166231.0, 67922.0, 74160.0, 13968.0, 278570.0, 279912.0, 276691.0, 234731.0, 272790.0, 273066.0, 246548.0, 207202.0, 221744.0, 97797.0, 279362.0, 274897.0, 251069.0, 261932.0, 247707.0, 186488.0, 251728.0, 240265.0, 217298.0, 141351.0, 258515.0, 283616.0, 270187.0, 229070.0, 110733.0, 267151.0, 270953.0, 248375.0, 165958.0, 219166.0, 212279.0, 151020.0, 91227.0, 82808.0, 20056.0, 294509.0, 282408.0, 265643.0, 240297.0, 286148.0, 267200.0, 225464.0, 223391.0, 211027.0, 87919.0, 286051.0, 268209.0, 249297.0, 262877.0, 232605.0, 171444.0, 255399.0, 222833.0, 173901.0, 143851.0, 26986.0, 103631.0, 184539.0, 98778.0, 40106.0, 68998.0, 148873.0, 136279.0, 72466.0, 27038.0, 72576.0, 58329.0, 8611.0, 12090.0, 2818.0, 155659.0, 255515.0, 236226.0, 136327.0, 159762.0, 201517.0, 151365.0, 80058.0, 96202.0, 21150.0, 200925.0, 229122.0, 170814.0, 162055.0, 144798.0, 45979.0, 117026.0, 118224.0, 65503.0, 29483.0, 286569.0, 284832.0, 280094.0, 269525.0, 218509.0, 282566.0, 280926.0, 269810.0, 236059.0, 283165.0, 267119.0, 232976.0, 245648.0, 193865.0, 33010.0, 283933.0, 287397.0, 268245.0, 259496.0, 287449.0, 270988.0, 267309.0, 277533.0, 262160.0, 179475.0, 287927.0, 273607.0, 265329.0, 284430.0, 269900.0, 250067.0, 273269.0, 271543.0, 264940.0, 250173.0, 288818.0, 280212.0, 281154.0, 267993.0, 205359.0, 282372.0, 279675.0, 271102.0, 219648.0, 276828.0, 269872.0, 231679.0, 184295.0, 190116.0, 52358.0, 283570.0, 284087.0, 277322.0, 250281.0, 285447.0, 275012.0, 263735.0, 275184.0, 255460.0, 205944.0, 278758.0, 283693.0, 257222.0, 276984.0, 268954.0, 251107.0, 274960.0, 262518.0, 251555.0, 235131.0, 293630.0, 278106.0, 267626.0, 224769.0, 110384.0, 287813.0, 268062.0, 257175.0, 180251.0, 265035.0, 240781.0, 199208.0, 138690.0, 128699.0, 26664.0, 286789.0, 283894.0, 265718.0, 223519.0, 287226.0, 267169.0, 247758.0, 265744.0, 242860.0, 162474.0, 286083.0, 270962.0, 241975.0, 272858.0, 252388.0, 215855.0, 271444.0, 238397.0, 230216.0, 160905.0, 273728.0, 278745.0, 275924.0, 257460.0, 181076.0, 269916.0, 280294.0, 262449.0, 214259.0, 242683.0, 245512.0, 209136.0, 120316.0, 161107.0, 25829.0, 282187.0, 288401.0, 272961.0, 253226.0, 282727.0, 273439.0, 256275.0, 259079.0, 243400.0, 144314.0, 280649.0, 274690.0, 263946.0, 274671.0, 259534.0, 226991.0, 272205.0, 254726.0, 238030.0, 211374.0, 279755.0, 293445.0, 270171.0, 233422.0, 144211.0, 297153.0, 278131.0, 251993.0, 192491.0, 251127.0, 239413.0, 201072.0, 107968.0, 153228.0, 25158.0, 294454.0, 282855.0, 270551.0, 226212.0, 284410.0, 268507.0, 240370.0, 249325.0, 216922.0, 156702.0, 291782.0, 268705.0, 246205.0, 276666.0, 246810.0, 209384.0, 273060.0, 235338.0, 219894.0, 177610.0, 74346.0, 223520.0, 256731.0, 172830.0, 62605.0, 138687.0, 248700.0, 200607.0, 127196.0, 103183.0, 126964.0, 111640.0, 23158.0, 70261.0, 8296.0, 236686.0, 295045.0, 257928.0, 182145.0, 260810.0, 249330.0, 211118.0, 151781.0, 171583.0, 84173.0, 261433.0, 264002.0, 211669.0, 225215.0, 213855.0, 131114.0, 203804.0, 203277.0, 163339.0, 94379.0, 262329.0, 273569.0, 268774.0, 236216.0, 143586.0, 259233.0, 277091.0, 258002.0, 203002.0, 219359.0, 232578.0, 202853.0, 82867.0, 123846.0, 37570.0, 285011.0, 278948.0, 271590.0, 227644.0, 283843.0, 273233.0, 249012.0, 249268.0, 233063.0, 134208.0, 280097.0, 272442.0, 252471.0, 268815.0, 253804.0, 217244.0, 269834.0, 252099.0, 232191.0, 204522.0, 267671.0, 276798.0, 262606.0, 216449.0, 122434.0, 275302.0, 269043.0, 242527.0, 168179.0, 247846.0, 220317.0, 164280.0, 84659.0, 109092.0, 13319.0, 297506.0, 287238.0, 262914.0, 207548.0, 286275.0, 259682.0, 225942.0, 232773.0, 212373.0, 105974.0, 287360.0, 267929.0, 227847.0, 274618.0, 237781.0, 199329.0, 262745.0, 219734.0, 214096.0, 156795.0, 82703.0, 204858.0, 250509.0, 163771.0, 91003.0, 171231.0, 251573.0, 211506.0, 141188.0, 125198.0, 162012.0, 144520.0, 25631.0, 77524.0, 29925.0, 248350.0, 298308.0, 261280.0, 198364.0, 265513.0, 259370.0, 213657.0, 151155.0, 197221.0, 76978.0, 276782.0, 268043.0, 224424.0, 235189.0, 224115.0, 171383.0, 221071.0, 211063.0, 183244.0, 145388.0, 96598.0, 143374.0, 170995.0, 87213.0, 45908.0, 102334.0, 164229.0, 138941.0, 113158.0, 78079.0, 59461.0, 75778.0, 14506.0, 55026.0, 11572.0, 210794.0, 263036.0, 217456.0, 156694.0, 231576.0, 230500.0, 204106.0, 110732.0, 162447.0, 57435.0, 263427.0, 237796.0, 201020.0, 186203.0, 199375.0, 113136.0, 166037.0, 180070.0, 144937.0, 94969.0 },
                                            {291372.0, 250593.0, 243805.0, 232355.0, 170312.0, 253242.0, 249538.0, 233698.0, 166984.0, 251853.0, 235874.0, 144145.0, 182152.0, 62315.0, 11936.0, 253831.0, 250430.0, 240764.0, 226429.0, 254346.0, 250973.0, 223026.0, 248572.0, 162173.0, 41090.0, 253979.0, 247111.0, 232357.0, 253344.0, 229654.0, 130263.0, 252874.0, 232158.0, 163348.0, 146826.0, 250857.0, 252164.0, 244235.0, 228157.0, 143199.0, 252126.0, 247004.0, 229869.0, 165115.0, 246280.0, 229927.0, 152828.0, 160235.0, 70748.0, 3424.0, 254289.0, 248127.0, 235761.0, 217434.0, 252702.0, 236794.0, 215053.0, 240524.0, 188949.0, 74946.0, 252616.0, 237534.0, 232663.0, 246484.0, 220940.0, 153299.0, 245180.0, 222657.0, 169105.0, 129853.0, 253106.0, 245762.0, 237367.0, 213540.0, 124842.0, 249644.0, 236465.0, 221045.0, 136108.0, 241537.0, 218730.0, 136543.0, 149358.0, 87176.0, 15429.0, 254493.0, 243012.0, 229326.0, 193034.0, 243235.0, 232205.0, 204859.0, 231769.0, 164184.0, 88961.0, 248204.0, 234917.0, 205444.0, 236294.0, 203150.0, 137529.0, 237968.0, 194394.0, 155741.0, 103626.0, 249144.0, 242432.0, 235100.0, 165035.0, 84836.0, 246968.0, 236374.0, 202232.0, 108505.0, 175018.0, 168265.0, 104092.0, 47927.0, 66255.0, 8266.0, 250331.0, 241683.0, 232640.0, 141892.0, 237183.0, 232980.0, 153209.0, 164528.0, 147667.0, 68837.0, 241819.0, 229289.0, 164951.0, 195248.0, 156767.0, 115564.0, 167877.0, 135418.0, 110615.0, 70316.0, 246157.0, 234998.0, 173389.0, 96205.0, 42076.0, 211688.0, 182113.0, 110501.0, 60918.0, 105646.0, 95188.0, 53004.0, 22836.0, 34084.0, 7377.0, 241032.0, 218170.0, 154188.0, 89695.0, 195470.0, 169075.0, 105723.0, 91495.0, 86736.0, 28434.0, 197654.0, 150043.0, 102149.0, 138001.0, 105718.0, 76581.0, 89898.0, 67388.0, 70741.0, 32686.0, 253005.0, 252094.0, 246091.0, 225877.0, 114093.0, 252118.0, 246361.0, 229642.0, 140804.0, 243630.0, 227496.0, 139500.0, 112063.0, 56424.0, 5770.0, 253434.0, 247574.0, 239189.0, 194222.0, 249309.0, 245787.0, 206930.0, 229547.0, 155555.0, 53836.0, 251589.0, 238973.0, 227000.0, 248068.0, 202390.0, 124221.0, 251232.0, 193145.0, 137373.0, 127522.0, 251728.0, 250290.0, 236018.0, 219890.0, 125328.0, 248784.0, 242204.0, 222776.0, 169614.0, 232017.0, 215587.0, 137170.0, 133871.0, 90109.0, 19286.0, 253318.0, 246056.0, 234199.0, 191857.0, 249344.0, 236633.0, 217704.0, 224316.0, 190113.0, 90154.0, 250260.0, 237272.0, 219934.0, 237828.0, 219152.0, 138854.0, 234392.0, 205868.0, 148074.0, 108765.0, 250033.0, 248794.0, 236658.0, 196679.0, 115133.0, 246481.0, 237900.0, 209242.0, 131372.0, 175875.0, 165695.0, 138325.0, 50660.0, 80490.0, 23164.0, 250486.0, 243914.0, 233124.0, 177792.0, 245810.0, 233707.0, 179218.0, 163445.0, 173097.0, 94956.0, 245945.0, 236291.0, 195974.0, 209663.0, 190299.0, 134144.0, 182548.0, 158460.0, 134631.0, 89967.0, 250749.0, 240137.0, 205588.0, 130854.0, 51746.0, 209808.0, 212923.0, 135310.0, 81754.0, 117446.0, 117515.0, 78929.0, 19175.0, 50042.0, 15714.0, 245589.0, 231822.0, 203733.0, 113486.0, 215602.0, 193751.0, 128698.0, 110717.0, 125924.0, 51223.0, 225564.0, 195807.0, 137029.0, 162743.0, 136874.0, 104597.0, 120796.0, 110535.0, 93915.0, 66744.0, 245872.0, 235756.0, 236422.0, 195302.0, 82609.0, 222567.0, 229288.0, 208187.0, 101191.0, 158452.0, 156978.0, 94941.0, 71140.0, 51536.0, 14311.0, 245087.0, 248786.0, 229029.0, 150294.0, 231676.0, 221918.0, 172098.0, 159852.0, 125787.0, 31740.0, 240553.0, 234301.0, 170033.0, 206519.0, 150120.0, 85002.0, 186406.0, 150746.0, 108302.0, 78306.0, 221844.0, 232970.0, 229191.0, 175029.0, 96629.0, 181990.0, 209695.0, 171468.0, 125838.0, 120700.0, 128262.0, 116042.0, 23594.0, 57262.0, 17776.0, 234334.0, 240991.0, 223441.0, 154871.0, 209399.0, 217657.0, 178269.0, 118753.0, 144681.0, 52383.0, 223054.0, 224162.0, 161287.0, 172561.0, 172361.0, 116320.0, 155602.0, 150455.0, 125664.0, 89577.0, 195543.0, 213091.0, 183489.0, 106580.0, 62612.0, 151338.0, 174316.0, 126525.0, 80981.0, 69261.0, 91800.0, 88939.0, 10791.0, 42949.0, 10546.0, 221137.0, 224966.0, 188691.0, 122594.0, 184545.0, 183892.0, 131929.0, 89108.0, 119199.0, 57809.0, 179971.0, 178426.0, 132050.0, 141747.0, 125347.0, 90054.0, 102663.0, 115673.0, 90896.0, 60808.0, 66247.0, 94399.0, 107832.0, 53709.0, 34077.0, 32445.0, 64863.0, 76374.0, 54157.0, 26758.0, 21190.0, 46006.0, 4956.0, 18808.0, 3108.0, 90241.0, 159845.0, 130351.0, 97679.0, 66279.0, 118568.0, 102022.0, 10654.0, 88046.0, 18529.0, 88763.0, 127810.0, 124232.0, 57243.0, 114713.0, 52683.0, 31530.0, 92374.0, 39227.0, 31568.0, 40474.0, 62481.0, 104052.0, 51837.0, 42618.0, 16427.0, 63325.0, 69303.0, 58350.0, 10382.0, 29208.0, 44812.0, 4519.0, 33274.0, 9465.0, 69303.0, 157229.0, 136607.0, 84323.0, 55631.0, 117498.0, 103976.0, 27952.0, 74199.0, 22702.0, 90712.0, 137950.0, 94893.0, 52745.0, 97320.0, 49707.0, 63725.0, 72032.0, 53106.0, 22781.0, 5167.0, 18765.0, 20613.0, 1533.0, 10435.0, 3840.0, 3305.0, 1000.0, 7550.0, 1000.0, 1000.0, 11406.0, 1000.0, 2418.0, 5017.0, 3738.0, 12166.0, 24565.0, 28647.0, 2908.0, 7865.0, 21776.0, 1000.0, 6550.0, 7341.0, 6322.0, 8315.0, 33045.0, 3678.0, 36588.0, 8663.0, 1000.0, 23659.0, 2763.0, 12111.0, 251700.0, 251029.0, 243966.0, 232204.0, 136201.0, 253800.0, 246132.0, 231576.0, 182012.0, 253790.0, 241382.0, 153204.0, 166583.0, 81140.0, 3330.0, 252643.0, 251015.0, 236333.0, 231615.0, 252468.0, 245790.0, 233847.0, 249155.0, 197376.0, 75976.0, 252994.0, 246187.0, 234367.0, 250871.0, 234718.0, 161216.0, 252316.0, 236604.0, 169233.0, 165452.0, 252934.0, 250458.0, 239552.0, 226243.0, 140685.0, 251894.0, 244288.0, 231819.0, 166438.0, 244250.0, 226092.0, 157623.0, 176289.0, 116242.0, 13182.0, 252822.0, 249016.0, 235641.0, 221209.0, 251660.0, 235412.0, 231961.0, 241642.0, 199637.0, 106856.0, 248823.0, 242466.0, 232015.0, 239616.0, 230716.0, 171717.0, 247845.0, 232166.0, 185234.0, 165126.0, 252439.0, 244061.0, 242441.0, 227538.0, 129542.0, 250662.0, 242156.0, 231939.0, 156868.0, 223268.0, 219710.0, 139086.0, 104474.0, 107074.0, 17340.0, 251647.0, 245029.0, 236368.0, 212545.0, 248370.0, 236844.0, 212801.0, 220277.0, 184813.0, 114125.0, 247469.0, 237259.0, 219271.0, 244073.0, 214308.0, 165471.0, 235586.0, 198063.0, 173080.0, 135653.0, 251601.0, 243982.0, 233039.0, 159382.0, 55131.0, 244891.0, 231846.0, 188910.0, 101043.0, 180927.0, 138531.0, 91541.0, 62291.0, 55991.0, 15395.0, 247408.0, 236061.0, 224030.0, 140049.0, 239373.0, 232270.0, 146035.0, 170654.0, 128328.0, 71892.0, 245986.0, 226624.0, 164799.0, 200692.0, 150184.0, 149029.0, 180446.0, 132145.0, 123025.0, 70939.0, 253079.0, 249886.0, 243452.0, 231393.0, 130671.0, 250979.0, 241802.0, 231355.0, 173843.0, 231479.0, 218114.0, 147880.0, 141946.0, 93379.0, 13155.0, 252715.0, 248438.0, 235720.0, 215819.0, 250464.0, 238545.0, 227862.0, 229364.0, 185980.0, 93492.0, 253071.0, 239593.0, 231351.0, 247565.0, 225514.0, 153156.0, 239710.0, 221804.0, 174957.0, 134050.0, 252452.0, 250353.0, 239869.0, 220678.0, 141646.0, 252310.0, 248153.0, 230214.0, 163968.0, 186093.0, 213480.0, 162920.0, 80531.0, 124136.0, 24567.0, 253183.0, 245065.0, 237687.0, 210634.0, 250265.0, 239865.0, 220420.0, 216410.0, 198021.0, 124967.0, 247944.0, 243003.0, 221039.0, 238746.0, 223658.0, 168924.0, 233643.0, 218054.0, 187649.0, 149188.0, 253184.0, 241900.0, 237697.0, 182212.0, 98499.0, 247874.0, 232129.0, 204237.0, 117116.0, 166602.0, 166596.0, 128942.0, 58684.0, 94439.0, 31134.0, 249129.0, 243673.0, 229037.0, 172906.0, 243933.0, 231195.0, 188727.0, 166420.0, 170601.0, 95106.0, 241651.0, 232272.0, 196353.0, 211715.0, 187538.0, 133283.0, 196822.0, 156031.0, 138461.0, 87846.0, 152818.0, 210439.0, 226487.0, 162224.0, 92813.0, 106630.0, 197943.0, 176068.0, 129605.0, 75044.0, 124478.0, 99979.0, 13088.0, 67944.0, 5283.0, 202159.0, 244221.0, 233388.0, 169190.0, 193247.0, 215316.0, 177096.0, 129735.0, 160164.0, 72480.0, 214842.0, 231543.0, 186234.0, 172162.0, 189893.0, 108235.0, 155661.0, 169920.0, 124832.0, 88673.0, 138606.0, 211965.0, 212271.0, 151290.0, 78688.0, 141301.0, 189551.0, 159316.0, 114056.0, 90687.0, 119829.0, 96657.0, 16628.0, 71358.0, 23475.0, 226267.0, 240841.0, 221019.0, 144293.0, 200132.0, 216990.0, 175003.0, 124268.0, 148273.0, 78335.0, 231327.0, 222143.0, 165416.0, 171829.0, 170659.0, 117159.0, 140425.0, 138307.0, 118169.0, 80487.0, 4268.0, 41939.0, 73718.0, 41930.0, 46557.0, 1000.0, 29844.0, 46069.0, 41492.0, 3050.0, 22559.0, 29588.0, 1000.0, 17991.0, 3999.0, 50582.0, 110822.0, 116742.0, 89509.0, 28938.0, 89749.0, 95961.0, 20363.0, 64702.0, 16806.0, 55610.0, 107861.0, 82601.0, 48681.0, 109527.0, 39585.0, 30258.0, 95322.0, 52930.0, 37171.0, 254317.0, 245686.0, 246374.0, 227462.0, 130624.0, 249268.0, 245286.0, 224895.0, 137604.0, 239739.0, 225702.0, 143446.0, 150615.0, 92311.0, 14642.0, 252486.0, 248851.0, 230768.0, 215855.0, 250437.0, 236397.0, 213455.0, 238317.0, 187710.0, 63764.0, 254169.0, 243145.0, 230281.0, 246058.0, 230778.0, 160953.0, 244087.0, 225858.0, 175333.0, 156407.0, 253148.0, 250920.0, 243832.0, 231913.0, 128459.0, 251851.0, 244540.0, 234130.0, 144407.0, 208489.0, 210575.0, 150633.0, 81277.0, 123518.0, 17519.0, 250753.0, 249093.0, 235512.0, 216777.0, 252300.0, 240798.0, 207357.0, 209575.0, 190170.0, 122684.0, 251306.0, 243009.0, 228198.0, 240494.0, 220088.0, 155909.0, 240560.0, 213785.0, 170582.0, 152320.0, 255919.0, 244540.0, 236211.0, 187957.0, 76498.0, 248455.0, 235760.0, 207816.0, 110436.0, 171767.0, 172227.0, 117423.0, 63651.0, 80161.0, 25641.0, 249148.0, 244491.0, 232721.0, 156189.0, 247041.0, 230156.0, 153420.0, 170827.0, 140284.0, 96458.0, 247858.0, 233972.0, 197351.0, 223522.0, 174054.0, 119043.0, 205517.0, 153556.0, 139256.0, 99028.0, 201449.0, 229762.0, 246805.0, 208129.0, 125610.0, 169082.0, 236048.0, 215483.0, 136135.0, 139461.0, 150189.0, 132639.0, 47112.0, 88974.0, 29495.0, 247667.0, 251294.0, 240151.0, 205578.0, 241372.0, 239224.0, 209846.0, 173031.0, 176213.0, 89871.0, 253659.0, 241897.0, 217923.0, 219740.0, 214511.0, 141070.0, 194786.0, 202300.0, 164559.0, 127327.0, 205949.0, 252467.0, 242135.0, 188062.0, 87563.0, 211576.0, 235305.0, 204926.0, 128051.0, 160311.0, 161951.0, 114692.0, 54898.0, 99681.0, 33251.0, 260100.0, 240503.0, 232424.0, 192626.0, 243667.0, 234689.0, 174321.0, 164122.0, 155809.0, 92574.0, 249859.0, 238190.0, 207227.0, 206021.0, 191322.0, 134567.0, 196723.0, 175940.0, 135805.0, 115610.0, 28614.0, 114376.0, 169902.0, 101657.0, 40407.0, 43563.0, 115037.0, 115888.0, 84887.0, 33123.0, 69857.0, 83702.0, 5882.0, 44799.0, 11693.0, 132788.0, 218313.0, 197679.0, 130645.0, 130788.0, 170849.0, 142832.0, 82357.0, 103910.0, 37400.0, 144134.0, 172252.0, 126139.0, 127306.0, 135207.0, 69717.0, 92066.0, 137973.0, 102143.0, 55304.0, 170797.0, 229738.0, 238250.0, 192652.0, 80271.0, 166718.0, 220613.0, 203588.0, 119365.0, 101919.0, 137564.0, 115515.0, 47165.0, 69741.0, 16724.0, 227425.0, 248727.0, 239553.0, 175973.0, 236025.0, 235142.0, 171988.0, 154247.0, 148522.0, 72297.0, 236236.0, 239259.0, 198625.0, 212761.0, 189405.0, 124183.0, 200732.0, 180390.0, 135775.0, 95093.0, 184519.0, 237606.0, 229591.0, 153251.0, 40567.0, 186479.0, 234536.0, 187707.0, 107724.0, 136305.0, 140356.0, 97607.0, 42630.0, 62519.0, 25848.0, 253096.0, 247032.0, 231188.0, 161982.0, 244855.0, 230350.0, 139967.0, 151000.0, 134311.0, 64222.0, 247998.0, 240210.0, 193223.0, 201837.0, 150566.0, 91729.0, 184510.0, 141853.0, 125530.0, 83288.0, 43726.0, 128150.0, 190896.0, 112548.0, 55602.0, 68705.0, 153498.0, 123774.0, 81378.0, 34579.0, 77934.0, 81847.0, 5383.0, 56479.0, 7929.0, 134637.0, 228483.0, 211623.0, 148903.0, 149280.0, 190991.0, 131582.0, 95737.0, 119900.0, 60752.0, 174974.0, 194703.0, 149730.0, 148277.0, 136774.0, 87235.0, 117308.0, 129538.0, 104608.0, 60172.0, 25540.0, 82516.0, 138871.0, 55808.0, 27082.0, 46841.0, 90711.0, 81303.0, 42480.0, 27946.0, 56317.0, 48094.0, 10120.0, 23040.0, 3227.0, 109770.0, 207670.0, 166872.0, 86538.0, 121072.0, 156922.0, 90669.0, 51730.0, 68292.0, 7615.0, 153749.0, 174852.0, 109289.0, 116173.0, 117543.0, 39425.0, 92061.0, 103471.0, 52261.0, 37187.0 },
                                            {286943.0, 221813.0, 211976.0, 206164.0, 144448.0, 224578.0, 219490.0, 207407.0, 169846.0, 223602.0, 214656.0, 162110.0, 184480.0, 112284.0, 18283.0, 226507.0, 221315.0, 208853.0, 193951.0, 224861.0, 213283.0, 202621.0, 215603.0, 190398.0, 115844.0, 225617.0, 214366.0, 208542.0, 222637.0, 209568.0, 169326.0, 224258.0, 199312.0, 185065.0, 146450.0, 225940.0, 223549.0, 213711.0, 205168.0, 144561.0, 224882.0, 218205.0, 203814.0, 184513.0, 222783.0, 204942.0, 176800.0, 195965.0, 129103.0, 12514.0, 224769.0, 217404.0, 207943.0, 197223.0, 219529.0, 208068.0, 204735.0, 212545.0, 201551.0, 128546.0, 222541.0, 209891.0, 204375.0, 217925.0, 207363.0, 178817.0, 214049.0, 193561.0, 181974.0, 162831.0, 222414.0, 215924.0, 207893.0, 203671.0, 148675.0, 219260.0, 208102.0, 197759.0, 168867.0, 216275.0, 202190.0, 171093.0, 157765.0, 118317.0, 25986.0, 225313.0, 210067.0, 207107.0, 183407.0, 212895.0, 204151.0, 207049.0, 209331.0, 195111.0, 139486.0, 217319.0, 207707.0, 199633.0, 208781.0, 205998.0, 181712.0, 212614.0, 187725.0, 175392.0, 146805.0, 220880.0, 212644.0, 208450.0, 180920.0, 93900.0, 221492.0, 210625.0, 198705.0, 134110.0, 198583.0, 183168.0, 139981.0, 72093.0, 97071.0, 30184.0, 220701.0, 208545.0, 206659.0, 164633.0, 214617.0, 207338.0, 189864.0, 188621.0, 168541.0, 105503.0, 209471.0, 207219.0, 174495.0, 207078.0, 185515.0, 147915.0, 179181.0, 166001.0, 143732.0, 98280.0, 213235.0, 209974.0, 167567.0, 91836.0, 52971.0, 209121.0, 192323.0, 123944.0, 81522.0, 134234.0, 101597.0, 77099.0, 22710.0, 45996.0, 9462.0, 212688.0, 208221.0, 158246.0, 102198.0, 201335.0, 174823.0, 127490.0, 118048.0, 120585.0, 58166.0, 188698.0, 153479.0, 106050.0, 141676.0, 136930.0, 82249.0, 116213.0, 99559.0, 83929.0, 43071.0, 224081.0, 222556.0, 212605.0, 206490.0, 136912.0, 224021.0, 215351.0, 208579.0, 147565.0, 219379.0, 206657.0, 145931.0, 167039.0, 92552.0, 18234.0, 225651.0, 219222.0, 208507.0, 182136.0, 222361.0, 213128.0, 186863.0, 208693.0, 173638.0, 78673.0, 225865.0, 212927.0, 187676.0, 219038.0, 191145.0, 146384.0, 220219.0, 186946.0, 153146.0, 124154.0, 225004.0, 220678.0, 208325.0, 202771.0, 152019.0, 221421.0, 211584.0, 203599.0, 158824.0, 213277.0, 207053.0, 164901.0, 149618.0, 113477.0, 15059.0, 224194.0, 214341.0, 208410.0, 193750.0, 214186.0, 208003.0, 201562.0, 209098.0, 190951.0, 96197.0, 217338.0, 206840.0, 195382.0, 212483.0, 207555.0, 165062.0, 210131.0, 188444.0, 170282.0, 132102.0, 223967.0, 216506.0, 209413.0, 199667.0, 114414.0, 220521.0, 213112.0, 201819.0, 151274.0, 209287.0, 193454.0, 153628.0, 90922.0, 115941.0, 17932.0, 224185.0, 211960.0, 208290.0, 173767.0, 213704.0, 208211.0, 189963.0, 193161.0, 168975.0, 110177.0, 216736.0, 208406.0, 183190.0, 210563.0, 198882.0, 137330.0, 193156.0, 166552.0, 155832.0, 126057.0, 218429.0, 211652.0, 206147.0, 129148.0, 62352.0, 212641.0, 204342.0, 162577.0, 105831.0, 145802.0, 133670.0, 104886.0, 44250.0, 64865.0, 15855.0, 212442.0, 209577.0, 181817.0, 122410.0, 210353.0, 201373.0, 138154.0, 142526.0, 124860.0, 83410.0, 209148.0, 194640.0, 122147.0, 164827.0, 140580.0, 118224.0, 145089.0, 124289.0, 101216.0, 71497.0, 224333.0, 223363.0, 209041.0, 194421.0, 82999.0, 222559.0, 217013.0, 193410.0, 120098.0, 184402.0, 167954.0, 117755.0, 88856.0, 48489.0, 3685.0, 223709.0, 218095.0, 208069.0, 152583.0, 221650.0, 210445.0, 158144.0, 177156.0, 146761.0, 37245.0, 221304.0, 206807.0, 161373.0, 203246.0, 155516.0, 128541.0, 184735.0, 150822.0, 116992.0, 70940.0, 225104.0, 220595.0, 210185.0, 177945.0, 96857.0, 217152.0, 211956.0, 191591.0, 126904.0, 168616.0, 171853.0, 111214.0, 58017.0, 64204.0, 15998.0, 222492.0, 215309.0, 208445.0, 156787.0, 215395.0, 209454.0, 173236.0, 152194.0, 150595.0, 59087.0, 216646.0, 208201.0, 160466.0, 189270.0, 168927.0, 122135.0, 163197.0, 145089.0, 120553.0, 92478.0, 224578.0, 209422.0, 190537.0, 123102.0, 66064.0, 214754.0, 201240.0, 162203.0, 86910.0, 131664.0, 101941.0, 70153.0, 25383.0, 34545.0, 12140.0, 216168.0, 208829.0, 185537.0, 113252.0, 206146.0, 184031.0, 135907.0, 119300.0, 113763.0, 40353.0, 202344.0, 190011.0, 117181.0, 162993.0, 134594.0, 86967.0, 133542.0, 105721.0, 95955.0, 57194.0, 200497.0, 188343.0, 169178.0, 96889.0, 32885.0, 125710.0, 159342.0, 114642.0, 57642.0, 41677.0, 56504.0, 37206.0, 4238.0, 10854.0, 1000.0, 202835.0, 212485.0, 171314.0, 93785.0, 157599.0, 159205.0, 107988.0, 51335.0, 66162.0, 10644.0, 160732.0, 163627.0, 118346.0, 94339.0, 107570.0, 36125.0, 89774.0, 94819.0, 53361.0, 37381.0, 220819.0, 195471.0, 156754.0, 73224.0, 23026.0, 140531.0, 144144.0, 93904.0, 38472.0, 58999.0, 58436.0, 35668.0, 7422.0, 15155.0, 2470.0, 210167.0, 198811.0, 155196.0, 65504.0, 166918.0, 150465.0, 94791.0, 31456.0, 66770.0, 19376.0, 172336.0, 157694.0, 110378.0, 99098.0, 90700.0, 42407.0, 61459.0, 79603.0, 54365.0, 16647.0, 37909.0, 43199.0, 37558.0, 17599.0, 7431.0, 13752.0, 36878.0, 19542.0, 13939.0, 4187.0, 5795.0, 1811.0, 1000.0, 2749.0, 2450.0, 74882.0, 82913.0, 20948.0, 20044.0, 23515.0, 32449.0, 22796.0, 3939.0, 12969.0, 1000.0, 34255.0, 49706.0, 34466.0, 13694.0, 24323.0, 2911.0, 18171.0, 20536.0, 18001.0, 6093.0, 226222.0, 224268.0, 212394.0, 208322.0, 161206.0, 225124.0, 214714.0, 208237.0, 180838.0, 223957.0, 210431.0, 176908.0, 196936.0, 124437.0, 30974.0, 224890.0, 221165.0, 210556.0, 203921.0, 222607.0, 214681.0, 206128.0, 218819.0, 207502.0, 118367.0, 223746.0, 213392.0, 207907.0, 219043.0, 207699.0, 191316.0, 222853.0, 203874.0, 202674.0, 175896.0, 226902.0, 220207.0, 211012.0, 207706.0, 149567.0, 222768.0, 213220.0, 207439.0, 183772.0, 220965.0, 208782.0, 179619.0, 206740.0, 146024.0, 29924.0, 223284.0, 216314.0, 207059.0, 204739.0, 223759.0, 207002.0, 207404.0, 210261.0, 207362.0, 160236.0, 218800.0, 210712.0, 205036.0, 212822.0, 206970.0, 207714.0, 215378.0, 205474.0, 200857.0, 180210.0, 223706.0, 216077.0, 209362.0, 204215.0, 132255.0, 221667.0, 214264.0, 207813.0, 169012.0, 216967.0, 210246.0, 168688.0, 157099.0, 139963.0, 42205.0, 222002.0, 214437.0, 207278.0, 178742.0, 213473.0, 208018.0, 203774.0, 209710.0, 203144.0, 154943.0, 220206.0, 208612.0, 200764.0, 210073.0, 201766.0, 190133.0, 209642.0, 200907.0, 183727.0, 162602.0, 221221.0, 215045.0, 208400.0, 155908.0, 72131.0, 217116.0, 207610.0, 190112.0, 120445.0, 196154.0, 174391.0, 111612.0, 92035.0, 83242.0, 28434.0, 217560.0, 208156.0, 205611.0, 132668.0, 209972.0, 207406.0, 157072.0, 193503.0, 150465.0, 90352.0, 212671.0, 207581.0, 138778.0, 203243.0, 178839.0, 152516.0, 171925.0, 142868.0, 134813.0, 91252.0, 225551.0, 224151.0, 215001.0, 208017.0, 131091.0, 224300.0, 214261.0, 207239.0, 149732.0, 218193.0, 207641.0, 156829.0, 164835.0, 120249.0, 26077.0, 224948.0, 217762.0, 209372.0, 192376.0, 222051.0, 210248.0, 200898.0, 214138.0, 183616.0, 108274.0, 221413.0, 211629.0, 206621.0, 212915.0, 202395.0, 171387.0, 213324.0, 191854.0, 179801.0, 138748.0, 226168.0, 221101.0, 210047.0, 207807.0, 133735.0, 222750.0, 216272.0, 207177.0, 166775.0, 219383.0, 209194.0, 161001.0, 137443.0, 138093.0, 31909.0, 223888.0, 217004.0, 208215.0, 196383.0, 218913.0, 211032.0, 203116.0, 209284.0, 193937.0, 144345.0, 220642.0, 209834.0, 199231.0, 213792.0, 205318.0, 184563.0, 211978.0, 194494.0, 190738.0, 149886.0, 225106.0, 219722.0, 208806.0, 173855.0, 84891.0, 218959.0, 209475.0, 194442.0, 130450.0, 204389.0, 180954.0, 121084.0, 76269.0, 93236.0, 39938.0, 221717.0, 209198.0, 205769.0, 144295.0, 213079.0, 203880.0, 174287.0, 195615.0, 162245.0, 105455.0, 213487.0, 206277.0, 163799.0, 208549.0, 189617.0, 146395.0, 192385.0, 159856.0, 142866.0, 111199.0, 225183.0, 221501.0, 214629.0, 180358.0, 80310.0, 224214.0, 215487.0, 196751.0, 103517.0, 175945.0, 172276.0, 120045.0, 44043.0, 56848.0, 7917.0, 225330.0, 219414.0, 208812.0, 146437.0, 221615.0, 207905.0, 159254.0, 172066.0, 152228.0, 79762.0, 221150.0, 209768.0, 165220.0, 201483.0, 167308.0, 124069.0, 191690.0, 155693.0, 136946.0, 90823.0, 227066.0, 212958.0, 207326.0, 155288.0, 59990.0, 220487.0, 207585.0, 177599.0, 105898.0, 168988.0, 140167.0, 95098.0, 47103.0, 64178.0, 12833.0, 221753.0, 213680.0, 206678.0, 126634.0, 214573.0, 207614.0, 151048.0, 166709.0, 122839.0, 61368.0, 219316.0, 207328.0, 154069.0, 200322.0, 156829.0, 118999.0, 172131.0, 141763.0, 118398.0, 91325.0, 165710.0, 173794.0, 149480.0, 75877.0, 18863.0, 122728.0, 141291.0, 98958.0, 36019.0, 34753.0, 50459.0, 26800.0, 10105.0, 16254.0, 1000.0, 201879.0, 207556.0, 151160.0, 76136.0, 146088.0, 152478.0, 79369.0, 50276.0, 56398.0, 15080.0, 172482.0, 154623.0, 99698.0, 114907.0, 83562.0, 26996.0, 83312.0, 82174.0, 27442.0, 14336.0, 225748.0, 223248.0, 215025.0, 206500.0, 142684.0, 224700.0, 217639.0, 208226.0, 153767.0, 220499.0, 207525.0, 160722.0, 184643.0, 123503.0, 19541.0, 224180.0, 220270.0, 206728.0, 188555.0, 222460.0, 207316.0, 207659.0, 215289.0, 197967.0, 124790.0, 222556.0, 215091.0, 207823.0, 218033.0, 207616.0, 188679.0, 222762.0, 203683.0, 187567.0, 159634.0, 226572.0, 221015.0, 213597.0, 207362.0, 129852.0, 222741.0, 214430.0, 207655.0, 161813.0, 224539.0, 208518.0, 160072.0, 157356.0, 138924.0, 42176.0, 225037.0, 216354.0, 207503.0, 184648.0, 222665.0, 211066.0, 205746.0, 210628.0, 205409.0, 160869.0, 222488.0, 210386.0, 204119.0, 213260.0, 207769.0, 189221.0, 212206.0, 192558.0, 198416.0, 161640.0, 228104.0, 215872.0, 209555.0, 168791.0, 79769.0, 222656.0, 210489.0, 195640.0, 120958.0, 214304.0, 192518.0, 112240.0, 96048.0, 103131.0, 24060.0, 220134.0, 213336.0, 206271.0, 123558.0, 213623.0, 209381.0, 164245.0, 209760.0, 171839.0, 125875.0, 216391.0, 206877.0, 159585.0, 209244.0, 185592.0, 152986.0, 208511.0, 155564.0, 152138.0, 111146.0, 227766.0, 221418.0, 213140.0, 209089.0, 98641.0, 223382.0, 220488.0, 207273.0, 139547.0, 215631.0, 202615.0, 127873.0, 103695.0, 106508.0, 21708.0, 226412.0, 222109.0, 208354.0, 161001.0, 222412.0, 210836.0, 192082.0, 209977.0, 167502.0, 100871.0, 223560.0, 212044.0, 174340.0, 217845.0, 199027.0, 152078.0, 211925.0, 176957.0, 160131.0, 138831.0, 229832.0, 220262.0, 212164.0, 172616.0, 82960.0, 222623.0, 214107.0, 203661.0, 111478.0, 204891.0, 177128.0, 115025.0, 82452.0, 88120.0, 23534.0, 225291.0, 214785.0, 207638.0, 142546.0, 218282.0, 208045.0, 168770.0, 192902.0, 162557.0, 103658.0, 221830.0, 209679.0, 167072.0, 213661.0, 189340.0, 138523.0, 209106.0, 156918.0, 149106.0, 108545.0, 231544.0, 220372.0, 197055.0, 128021.0, 29452.0, 201653.0, 213459.0, 140053.0, 65975.0, 106109.0, 106327.0, 51600.0, 10251.0, 23153.0, 8703.0, 226294.0, 217853.0, 197404.0, 100352.0, 216283.0, 205021.0, 136591.0, 125837.0, 97441.0, 36505.0, 223077.0, 194240.0, 146505.0, 170431.0, 131474.0, 74504.0, 151394.0, 119094.0, 103478.0, 57898.0, 227660.0, 224261.0, 216424.0, 180809.0, 72872.0, 225232.0, 217972.0, 207725.0, 123052.0, 200894.0, 192238.0, 130418.0, 95373.0, 76973.0, 19734.0, 225949.0, 220855.0, 207353.0, 147557.0, 223906.0, 211577.0, 186828.0, 210365.0, 162377.0, 99761.0, 225060.0, 212984.0, 175148.0, 215868.0, 182242.0, 159921.0, 206665.0, 163823.0, 161928.0, 125429.0, 227877.0, 220724.0, 211496.0, 151921.0, 67073.0, 224395.0, 213774.0, 183605.0, 91200.0, 211081.0, 171656.0, 106775.0, 65505.0, 75574.0, 18140.0, 225905.0, 219614.0, 206602.0, 118704.0, 223641.0, 208912.0, 159147.0, 187429.0, 163844.0, 83342.0, 221031.0, 206293.0, 149436.0, 207523.0, 184810.0, 140093.0, 200191.0, 144838.0, 134638.0, 97087.0, 228932.0, 223499.0, 202734.0, 119724.0, 35182.0, 221493.0, 215974.0, 164893.0, 77220.0, 140958.0, 133072.0, 77372.0, 28743.0, 41282.0, 11701.0, 226466.0, 220564.0, 201273.0, 118202.0, 219762.0, 208814.0, 148059.0, 138151.0, 121672.0, 45353.0, 224258.0, 209066.0, 138907.0, 184577.0, 157950.0, 107128.0, 167023.0, 115761.0, 104245.0, 70896.0, 210795.0, 194716.0, 161285.0, 78363.0, 19541.0, 192063.0, 188382.0, 117340.0, 41671.0, 120379.0, 65433.0, 58411.0, 17726.0, 16659.0, 2452.0, 229587.0, 223197.0, 174591.0, 81950.0, 221653.0, 191656.0, 119505.0, 102440.0, 86619.0, 37301.0, 224594.0, 193984.0, 115752.0, 180235.0, 131864.0, 75382.0, 156284.0, 103827.0, 74846.0, 50701.0 } };


struct floorplan_structure floorplan; 
extern struct UnitRel rel_unit[TOTAL_STRUCTURES];

double Binv[THERMAL_NODES][SYSTEM_SIZE];
double Cexp[THERMAL_NODES][THERMAL_NODES];

int power[DIM_Y][DIM_X];
double power_trace[SYSTEM_SIZE];
double t_steady[THERMAL_NODES];

double TempTraceEnd[THERMAL_NODES];
double Tsteady[THERMAL_NODES];
double Tdifference[THERMAL_NODES];
int SystemFIT[DIM_X*DIM_Y];

int state_last[DIM_X*DIM_Y], starting_fit[DIM_X*DIM_Y], state_stability[DIM_X*DIM_Y];
void FLEA_init(){
    for(int i = 0; i < SYSTEM_SIZE; i++){
        state_last[i] = -1;
        starting_fit[i] = -1;
        state_stability[i] = 0;
    }
}

int getX(int id){
    int retorno = id%DIM_X;
    if(retorno >= DIM_X || retorno < 0){
        printf("\nErro getX(%d) = %d\n", id, retorno);
        throw 1;
    }
    return retorno;
}

int getY(int id){
    int retorno = (int)(id/DIM_Y);
    if(retorno >= DIM_Y || retorno < 0){
        printf("\nErro getY(%d) = %d\n", id, retorno);
        throw 1;
    } 
    return retorno;
}

int getSouth(int x, int y){
    if(y > 0){
        return(many_core[y-1][x].type);
    } else {
        return(-1);
    }
}

int getNorth(int x, int y){
    if(y < DIM_Y-1){
        return(many_core[y+1][x].type);
    } else {
        return(-1);
    }
}

int getEast(int x, int y){
    if(x < DIM_X-1){
        return(many_core[y][x+1].type);
    } else {
        return(-1);
    }
}

int getWest(int x, int y){
    if(x > 0){
        return(many_core[y][x-1].type);
    } else {
        return(-1);
    }
}


int getNorthEast(int x, int y){
    if(y < DIM_Y-1 && x < DIM_X-1){
        return(many_core[y+1][x+1].type);
    } else {
        return(-1);
    }
}

int getNorthWest(int x, int y){
    if(y < DIM_Y-1 && x > 0){
        return(many_core[y+1][x-1].type);
    } else {
        return(-1);
    }
}

int getSouthWest(int x, int y){
    if(y > 0 && x > 0){
        return(many_core[y-1][x-1].type);
    } else {
        return(-1);
    }
}

int getSouthEast(int x, int y){
    if(y > 0 && x < DIM_X-1){
        return(many_core[y-1][x+1].type);
    } else {
        return(-1);
    }
}


// A utility function to swap two elements 
void swap(int* a, int* b) { 
    int t = *a; 
    *a = *b; 
    *b = t; 
}

/* This function takes last element as pivot, places 
the pivot element at its correct position in sorted 
array, and places all smaller (smaller than pivot) 
to left of pivot and all greater elements to right 
of pivot */
int partition (int arr[], int arr2[], int low, int high) { 
    int pivot = arr[high]; // pivot 
    int i = (low - 1); // Index of smaller element and indicates the right position of pivot found so far
    int j;
    for (j = low; j <= (high - 1); j++) { 
        // If current element is smaller than the pivot 
        if (arr[j] < pivot) { 
            i++; // increment index of smaller element 
            swap(&arr[i], &arr[j]);
            swap(&arr2[i], &arr2[j]);
        } 
    } 
    swap(&arr[i + 1], &arr[high]); 
    swap(&arr2[i + 1], &arr2[high]); 
    return (i + 1); 
} 

/* The main function that implements QuickSort 
arr[] --> Array to be sorted, 
low --> Starting index, 
high --> Ending index */
void quickSort(int arr[], int arr2[], int low, int high){ 
    if (low < high){ 
        /* pi is partitioning index, arr[p] is now 
        at right place */
        int pi = partition(arr, arr2, low, high); 
  
        // Separately sort elements before 
        // partition and after partition 
        quickSort(arr, arr2, low, (pi - 1)); 
        quickSort(arr, arr2, (pi + 1), high); 
    }
}

void randPositions(int arr[], int arr2[], int low, int high){
    for(int i = low; i < (high-1); i++){
        if(arr[i] == arr[i+1]){
            if( 60 > random()%100 ){
                swap(&arr[i], &arr[i+1]);
                swap(&arr2[i], &arr2[i+1]);
            }
        }
    }
}



//The place of x will be informed by sucessives sums and the y by num(addr%DIM_X or DIM_Y)
unsigned int API_getPEState(unsigned int id){
    unsigned int x = getX(id);
    unsigned int y = getY(id);
    int state_x, state_y, z, state, a;
    int dx, dy, dz;
    int state_dx, state_dy, state_d;

    unsigned int immediate[3], diagonal[3];
    
    for(a = 0; a < 3; a++){
        immediate[a] = 0;
        diagonal[a] = 0;
    }

    // SOUTH
    if(getSouth(x, y) != -1)
        immediate[getSouth(x,y)]++;
    // NORTH
    if(getNorth(x, y) != -1)
        immediate[getNorth(x,y)]++;
    // WEST
    if(getWest(x, y) != -1)
        immediate[getWest(x,y)]++;
    // EAST
    if(getEast(x, y) != -1)
        immediate[getEast(x,y)]++;

    // NORTH+EAST
    if(getNorthEast(x, y) != -1)
        diagonal[getNorthEast(x,y)]++;
    // NORTH+WEST
    if(getNorthWest(x, y) != -1)
        diagonal[getNorthWest(x,y)]++;
    // SOUTH+WEST
    if(getSouthWest(x, y) != -1)
        diagonal[getSouthWest(x,y)]++;
    // SOUTH+EAST
    if(getSouthEast(x, y) != -1)
        diagonal[getSouthEast(x,y)]++;
    
    x = immediate[0];
    y = immediate[1];
    z = immediate[2];

    dx = diagonal[0];
    dy = diagonal[1];
    dz = diagonal[2];


    state_x = (int)(x ? ((x*x*x - 18*x*x + 107*x) / 6) : 0);
    state_y = (int)(y ? ((11*y - y*y - 2*x*y) / 2) : 0);
    state = state_x + state_y + z;

    state_dx = (int)(dx ? ((dx*dx*dx - 18*dx*dx + 107*dx) / 6) : 0);
    state_dy = (int)(dy ? ((11*dy - dy*dy - 2*dx*dy) / 2) : 0);
    state_d  = state_dx + state_dy + dz;

    state = state + 35*state_d;

    //if(state == 14) printf("\n%d = (%d, %d, %d)\n", state, x, y, z);

    if(state >= 35*35){
        printf("ERRO CALCULANDO ESTADO: %d", state);
        while(1){}
    }
    return state;
}

unsigned int API_GetTaskSlotFromTile(unsigned int id, unsigned int app){
    if(many_core[getY(id)][getX(id)].taskSlot > 0){
        many_core[getY(id)][getX(id)].taskSlot = many_core[getY(id)][getX(id)].taskSlot - 1;
        if(many_core[getY(id)][getX(id)].type == -1){
            many_core[getY(id)][getX(id)].id = tasks[app].id;
            many_core[getY(id)][getX(id)].type = tasks[app].type;
            many_core[getY(id)][getX(id)].power = tasks[app].power;
            many_core[getY(id)][getX(id)].totalTime = tasks[app].totalTime;
            many_core[getY(id)][getX(id)].current_time = 0;
        }
        return 1;
    }else {
        return -1;
    }
}

int API_getMaxIdxfromRow(float scoreTable[N_TASKTYPE][N_STATES], unsigned int row){
    unsigned int max = 0, i;
    for( i = 1; i < N_STATES; i++){
        if(scoreTable[row][i] > scoreTable[row][max]){
            max = i;
        }
    }
    return max;
}

void API_PrintScoreTable(float scoreTable[N_TASKTYPE][N_STATES]){
    int i, j;
    FILE *fst, *fst2;
    fst = fopen("ScoreTable.tsv", "w");
    fst2 = fopen("ScoreTable_vector.tsv", "w");
    fprintf(fst2, "float scoreTable[N_TASKTYPE][N_STATES] = { ");
    for(i = 0; i < N_TASKTYPE; i++){
        fprintf(fst2, " {");
        for(j = 0; j < N_STATES; j++){
            fprintf(fst,"%d",(int)(scoreTable[i][j]*1000));
            fprintf(fst2,"%.1f",(float)((int)(scoreTable[i][j]*1000)));
            //fprintf(fst,"%d",(int)(scoreTable[i][j]*1000));
            if(j != N_STATES-1){
                fprintf(fst,"\t");
                fprintf(fst2,", ");
            }
        }
        fprintf(fst2, " }");
        if (i != N_TASKTYPE-1){
            fprintf(fst,"\n");
            fprintf(fst2,",\n");
        }
    }
    fprintf(fst2," };");
    fclose(fst);
    fclose(fst2);
}

void load_matrices(){
    FILE *binvpointer;
    binvpointer = fopen("20x20/binv.txt","r");
    FILE *cexppointer;
    cexppointer = fopen("20x20/cexp.txt","r");

    char line[1200000];
    char *number;
    int column, row;

    //printf("atira4");

    for (row = 0; row < THERMAL_NODES; row++){
        fgets(line, sizeof(line), binvpointer);
        number = strtok(line, " ");
        for(column = 0; column < SYSTEM_SIZE; column++){
            Binv[row][column] = strtod(number, NULL);
            //printf("%f ", Binv[row][column]); 
            number = strtok(NULL, " ");      
        }
    }


    for (row = 0; row < THERMAL_NODES; row++){
        fgets(line, sizeof(line), cexppointer);
        number = strtok(line, " ");
        for(column = 0; column < THERMAL_NODES; column++){
            Cexp[row][column] = strtod(number, NULL);
            //printf("%f ", Cexp[row][column]); 
            number = strtok(NULL, " ");      
        }
    }

    fclose(binvpointer);
    fclose(cexppointer);

    for(int i=0;i<THERMAL_NODES;i++){
        TempTraceEnd[i] = 313.15; // Kelvin
    }

    int unitc;
	for (unitc = 0; unitc < TOTAL_STRUCTURES; unitc++){
        sprintf(floorplan.units[unitc].name, "p%d", unitc);
        floorplan.units[unitc].height = 0.000194; // mem 8Kb
        floorplan.units[unitc].width = 0.000194; // mem 8Kb

        init(&floorplan, unitc);  /* Initialize structures*/
        fitinit(unitc);           /* Initialize FITS for each structure*/
    }
}

void calcula_temp(){ 
    int index = 0;
    // estimate the power consumption of each PE
    for (int yi = 0; yi < DIM_Y; yi++){
	    for(int xi = 0; xi < DIM_X; xi++){
		    float variation = (float)(rand()%30) - 15.0; // variates 15%
            variation = variation/100;
            if(many_core[yi][xi].type != -1){
                power_trace[index] = many_core[yi][xi].power + (many_core[yi][xi].power*variation);
                if (power_trace[index] < 0.1) 
                    power_trace[index] = 0.1;
            }
            else{
                power_trace[index] = 0.1;
            }
		    index++;
        }
	}

    // calculates the temperature of each PE
    int i, j;
    double heatContributionPower;

    for(i = 0; i < THERMAL_NODES; i++){
        heatContributionPower = 0;
        for(j = 0; j < SYSTEM_SIZE; j++){
            heatContributionPower += Binv[i][j]*power_trace[j];
        }
        Tsteady[i] = heatContributionPower + 318.15; // soma com Temperatura Ambiente
        Tdifference[i] = TempTraceEnd[i] - Tsteady[i]; // Iaçanã: trouxe pra cá esse calculo, estava em outro for()
    }

    //for(int k = 0; k < THERMAL_NODES; k++) Tdifference[k] = TempTraceEnd[k] - Tsteady[k];    

    for(int k = 0; k < THERMAL_NODES; k++){
        double sumExponentials = 0;
        for(j = 0; j < THERMAL_NODES; j++){
            sumExponentials += Cexp[k][j] * Tdifference[j];
        }
        TempTraceEnd[k] = Tsteady[k] + sumExponentials;
    }
}

void calcula_fit(){ 
    for (int structures=0; structures < TOTAL_STRUCTURES; structures++){
        /* Calculate FIT value by feeding in each structures temperature, activity
            * factor, processor supply voltage, and processor frequency. */
        //printf("Info: Temp : %f , Power: %f, strct = %d",TempTraceEnd[structures], power_trace[structures],structures);
        allmodels(TempTraceEnd[structures], power_trace[structures], 1.0,  1.0,  structures);
	}

    //for(int i = 0; i < DIM_Y*DIM_X; i++) {}SystemFIT[i] = (int)rel_unit[i].ind_inst*100;

    int m, n, i = 0, avgFit = 0, totalFit = 0;
    for (n = 0; n < DIM_Y; n++){
        for (m = 0; m < DIM_X; m++){
            SystemFIT[i] = (int)rel_unit[i].ind_inst*100;
            avgFit = many_core[n][m].fit;
            // printsv("avgFit ", avgFit);
            totalFit = many_core[n][m].fit << 5;
            // printsv("totalFit1 ", totalFit);
            totalFit = totalFit - avgFit;
            // printsv("totalFit2 ", totalFit);
            totalFit = totalFit + SystemFIT[i];
            // printsv("totalFit3 ", totalFit);
            many_core[n][m].fit = totalFit >> 5;
            //printf("FIT %d => %d\n",i, many_core[n][m].fit);
            i++;
        }
    }
}

void manyCorePrint(){ 
    FILE *fss;
    char tipo[3];
    fss = fopen("SystemShot.tsv", "w");
    int id = 0;
    for(int j=0;j<DIM_Y;j++){
        for(int i=0;i<DIM_X;i++){
            if( many_core[j][i].type != -1 ) sprintf(tipo, "%d", many_core[j][i].type);
            else sprintf(tipo, "-");
            fprintf(fss,"(%2d,%2d){%s,%4d}\t",j, i, tipo, API_getPEState(id));
            id++;
        }
        fprintf(fss, "\n");
    }
    fclose(fss);
}

void printHeaders(){
    FILE *fl,*fpower,*fp;
#if LOG
    fl = fopen("data/FLEA_FITlog.tsv", "w");
    fp = fopen("data/FLEA_SystemTemperature.tsv", "w");
    fpower = fopen("data/FLEA_SystemPower.tsv", "w");
    fprintf(fp, "time");
    fprintf(fl, "time");
    fprintf(fpower, "time");
    for(int i=0;i<DIM_X*DIM_Y;i++){
        fprintf(fp, "\t%d",i);
        fprintf(fl, "\t%d",i);
        fprintf(fpower, "\t%d",i);
    }
    fprintf(fp, "\n");
    fprintf(fl, "\n");
    fprintf(fpower, "\n");
    fclose(fp);
    fclose(fl);
    fclose(fpower);
#endif
    return;
}

int readline(FILE *f, char *buffer, size_t len){
    char c; 
    int i;
    memset(buffer, 0, len);
    for (i = 0; i < len; i++){   
        int c = fgetc(f); 
        if (!feof(f)) {   
            if (c == '\r')
                buffer[i] = 0;
            else if (c == '\n'){   
                buffer[i] = 0;
                return i+1;
            }   
            else
            buffer[i] = c; 
        }   
        else{   
            return -1; 
        }   
    }   
    return -1; 
}

int getNextTask(){
    while(ftasks == NULL){
        ftasks = fopen("tasks", "r");
        printf("\nTasks file is open!\n");
    }
    char task[4];
    int task_i;
    readline(ftasks, task, 4);
    task_i = atoi(task);
    if(task_i == -1){
        fclose(ftasks);
    }
    return task_i;
}

void GROUPED_allocation(int task_to_allocate){
    int k = 0, slot;
    for(int i = 0; i < DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            slot = API_GetTaskSlotFromTile(k, task_to_allocate);
            k++;
            if (slot != -1){
                printf(" - Task %d allocated at addr: %dx%d", task_to_allocate, getY(k), getX(k));
                return;
            }
        }
    }
}

unsigned int getLessTested(int tasktype){
    unsigned int id, state, atualizacoes = 0, selected = 0;
    atualizacoes = 0xffffffff;
    for(id = 0; id < SYSTEM_SIZE; id++){
        if(many_core[getY(id)][getX(id)].type == -1){
            state = API_getPEState(id);
            if(atualizacoes >= tableUpdates[tasktype][state]){
                atualizacoes = tableUpdates[tasktype][state];
                selected = id;
            }
        }
    }
    return selected;
}

unsigned int getTotalUpdated(){
    unsigned int total = 0;
    for(int i = 0; i<N_TASKTYPE; i++){
        for(int j = 0; j<N_STATES; j++){
            total += tableUpdates[i][j];
        }
    }
    return total;
}


void FLEA_training_allocation(int task_to_allocate){
    float epsilon = 0.2;
    int sorted_id[DIM_X*DIM_Y], sorted_score[DIM_X*DIM_Y];
    int k = 0;
    for(int i = 0; i < DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            sorted_id[k] = k;
            sorted_score[k] = (int)(scoreTable[tasks[task_to_allocate].type][API_getPEState(k)]*1000);
            k++;
        }
    }
    k=0;
    quickSort(sorted_score, sorted_id, 0, (DIM_X*DIM_Y)-1);
    int id, slot = -1;
    if((int)(epsilon*100) > random()%100){ 
        int oneofthree = random()%3;
        if(oneofthree != 0){
            printf(" - LESS");
            id = getLessTested(tasks[task_to_allocate].type); // try the less tested state available
            slot = API_GetTaskSlotFromTile(id, task_to_allocate);
        } else{
            printf(" - RAND");
            do{
                id = sorted_id[random()%SYSTEM_SIZE];
                slot = API_GetTaskSlotFromTile(id, task_to_allocate);
            }while(slot == -1);
        }
    } else{ // uses the learned information
        // try to get the best tile slot
        for(int i = (DIM_X*DIM_Y)-1; i >= 0; i--){
            id = sorted_id[i];
            slot = API_GetTaskSlotFromTile(id, task_to_allocate);
            if (slot != -1) break;
        }
    }
    if (slot != -1)
        printf(" - Task %d allocated at addr: %dx%d", task_to_allocate, getY(id), getX(id));
}

// float Q_rsqrt( float number ){
//     long i;
//     float x2, y;
//     const float threehalfs = 1.5F;

//     x2 = number * 0.5F;
//     y  = number;
//     i  = * ( long * ) &y;                       // evil floating point bit level hacking
//     i  = 0x5f3759df - ( i >> 1 );               // what the fuck?
//     y  = * ( float * ) &i;
//     y  = y * ( threehalfs - ( x2 * y * y ) );   // 1st iteration
//     y  = y * ( threehalfs - ( x2 * y * y ) );   // 2nd iteration, this can be removed

//     return y;
// }

void FLEA_training(int time){
    int addr=0, slot=0, taskType=0, current_fit=0, toprint=0, state, tp,  maxid;
    
    //---------------------------------------
    // --------- Q-learning stuff -----------
    // Hyperparameters
    float discount = (float) time / 1000000.0;
    float alpha = 0.01 - (0.01*discount);
    float gamma = 0.6;
    float oldvalue, maxval, reward = 0.0,  delta = 0.0;

    FILE *freward;
    freward = fopen("Rewards.log", "a");
    
    for(int i = 0; i < SYSTEM_SIZE; i++){
        taskType = many_core[getY(i)][getX(i)].type;
        current_fit = many_core[getY(i)][getX(i)].fit;
        if(taskType != -1){ 
            state = API_getPEState(i);
            
            
            //printf("state: %d", state);
            // if the state has changed
            if(state != state_last[i]){ 
                state_last[i] = state;
                starting_fit[i] = many_core[getY(i)][getX(i)].fit;
                state_stability[i] = 0;
            } 
            else if ( state_stability[i] >= 200 ) {
            // calculates the reward

                delta = ((float)(current_fit/100) - (float)(starting_fit[i]/100))*0.003;
                reward = 50.0+(delta*delta);
                //reward = Q_rsqrt(reward);
                reward = 1/sqrt(reward);
                reward = ((-200.0 * reward * delta)+100.0);
                // if(delta >= 2.0 && reward > 0.0){
                //     printf("\nErro no cálculo do reward!\nDelta: %f; Reward: %f\n", delta, reward);
                //     throw 3;
                // }
                fprintf(freward, "%.4f; %.4f\n", delta, reward);
                 
                // printf("Delta: %.2f -- Current: %.2f Starting: %.2f \n",delta, (float)(current_fit/100),(float)(starting_fit[i]/100));
                // printf("Reward: %.2f\n",  reward);

                // gets the old value
                oldvalue = scoreTable[taskType][state];
                
                // gets the max value from the table
                //maxid = API_getMaxIdxfromRow(&(scoreTable[0][0]), taskType, N_STATES, N_TASKTYPE);
                maxid = API_getMaxIdxfromRow(scoreTable, taskType);
                maxval = scoreTable[taskType][maxid];
                // printf("MaxID: %d -- MaxVal: %.2f\n", maxid, maxval);

                // updates the score table
                scoreTable[taskType][state] = (((1 - alpha) * oldvalue) + (alpha * ( reward + (gamma * maxval))));
                tableUpdates[taskType][state]++;

                // saves the current FIT for the next update
                state_stability[i] = 0;
                starting_fit[i] = current_fit;
            }
            else{
                state_stability[i]++;
            }
        }
    }
    fclose(freward);
    // print score table
    if(time % 100 == 0) API_PrintScoreTable(scoreTable);
    printf(" - Updates so far: %ld", getTotalUpdated());
}

int getOccupation(){
    int cont = 0;
    for(int i = 0; i<DIM_X; i++){
        for(int j = 0; j < DIM_Y; j++){
            if(many_core[j][i].type != -1){
                cont++;
            }
        }
    }
    return ((cont*100)/SYSTEM_SIZE);
}

int main(int argc, char *argv[]){

    srand(time(0));

    // leitura dos arquivos binv e cexp do TEA
    load_matrices();

    if(powerlog == NULL){
        powerlog = fopen("data/FLEA_SystemPower.tsv", "a");
    }
    if(fp == NULL){
        fp = fopen("data/FLEA_SystemTemperature.tsv", "a");
    }  
    if(fitlog == NULL){
        fitlog = fopen("data/FLEA_FITlog.tsv", "a");
    }

    // manycore model initializing
    for(int i=0;i<DIM_X;++i){
        for(int j=0;j<DIM_Y;++j){
            many_core[j][i].id = 0;
            many_core[j][i].type = -1;
            many_core[j][i].power = 0.1;
            many_core[j][i].totalTime = -1;
            many_core[j][i].taskSlot = 1;
            many_core[j][i].current_time = 0;
            many_core[j][i].fit = 1000;
            many_core[j][i].temp = 0;
        }
    }

    printHeaders();

    int cont=0, allocate_task=-1;
    
    /* FLEA INITIALIZATION */
    FLEA_init();
    for(int i = 0; i < N_TASKTYPE; i++){
        for(int j = 0; j < N_STATES; j++ ){
            //scoreTable[i][j] = scoreTable[i][j] - scoreTable[i][j] + (float)random()%2000;
            //scoreTable[i][j] = 1000.0;
            if( scoreTable[i][j] == 1000.0 ) tableUpdates[i][j] = 0;
            else tableUpdates[i][j] = 1000;
            scoreTable[i][j] = scoreTable[i][j] / 1000.0;
        }
    }
    
    while(1){
        int barra_ene = 0;    
        printf("\rTime: %.3fs - SysOc: %d",((float)cont/1000), getOccupation());
        cont++;

        // updates the temperature and FIT
        calcula_temp();
        calcula_fit();   

        // run until 1 sec of simulation
        if(cont == 1000000){
            break; 
        } /*else if( cont % 100 == 0 ){
            manyCorePrint();
        }*/
        // STARTING SIMULATION...
        // if the time is over 20 ms start to evaluate the system
        else if(cont>20){
            
            // checks if the system is running at target occupation
            if( getOccupation() < int(30*sin(cont/1000) + TARGET_OCCUPATION)  ){
                allocate_task = getNextTask();
                
                if(allocate_task != -1){
                    FLEA_training_allocation(allocate_task); barra_ene = 1;
                    
                    //GROUPED_allocation(allocate_task); barra_ene = 1;
                }
            }
            if(cont > 1000) FLEA_training(cont);
        }

        // write the time into the log files:
#if LOG
        fprintf(fitlog, "%.5f", ((float)cont/1000));
        fprintf(powerlog, "%.5f", ((float)cont/1000));
        fprintf(fp, "%.5f", ((float)cont/1000));
#endif
        for(int i=0;i<SYSTEM_SIZE;++i){
#if LOG
            // write info into the log files
            fprintf(powerlog,"\t%f",power_trace[i]);
            fprintf(fp, "\t%.2f", (((float)(TempTraceEnd[i]*100)/100)-273.15));
            fprintf(fitlog,"\t%f",rel_unit[i].ind_inst);
#endif  
            if(many_core[getY(i)][getX(i)].type != -1) { 
                // checks if the task has finished
                if(many_core[getY(i)][getX(i)].current_time >= many_core[getY(i)][getX(i)].totalTime) {
                    printf(" - Task %d dealocated from addr %dx%d",many_core[getY(i)][getX(i)].id,(int)i/DIM_X, i%DIM_X ); barra_ene = 1;
                    //manyCorePrint();
                    //getchar();
                    many_core[getY(i)][getX(i)].id = 0;
                    many_core[getY(i)][getX(i)].type = -1;
                    many_core[getY(i)][getX(i)].power = 0.1;
                    many_core[getY(i)][getX(i)].totalTime = -1;
                    many_core[getY(i)][getX(i)].current_time = 0;
                    many_core[getY(i)][getX(i)].taskSlot = 1;
                    many_core[getY(i)][getX(i)].type = -1;
                }
                else{
                    // increase the task running counter 
                    many_core[getY(i)][getX(i)].current_time++;
                }
            }
        }
#if LOG
        fprintf(fitlog,     "\n");
        fprintf(powerlog,   "\n");
        fprintf(fp,         "\n");
#endif
        if(barra_ene) printf("\n");
    }
    return 0;
}